{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Field } from 'formik';\n\nclass TextInputWrappedInternal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", event => {\n      const {\n        field: {\n          name\n        },\n        form: {\n          handleChange\n        }\n      } = this.props;\n      handleChange(event);\n    });\n  }\n\n  render() {\n    const {\n      field,\n      label\n    } = this.props;\n    const inputProps = Object.assign({}, this.props);\n    delete inputProps.form;\n    delete inputProps.label;\n    delete inputProps.field;\n    delete inputProps.error;\n    return __jsx(\"div\", {\n      className: \"form-group\"\n    }, this.props.label && __jsx(\"label\", {\n      htmlFor: this.props.id\n    }, label), this.props.type == \"text\" && __jsx(\"input\", _extends({\n      onChange: this.handleChange,\n      id: label,\n      value: field.value,\n      name: field.name\n    }, inputProps, {\n      className: `form-control${this.props.error ? ' is-invalid' : ''}`\n    })), this.props.type == \"textarea\" && __jsx(\"textarea\", _extends({\n      onChange: this.handleChange,\n      id: label,\n      value: field.value,\n      name: field.name\n    }, inputProps, {\n      className: `form-control${this.props.error ? ' is-invalid' : ''}`\n    })), this.props.type == \"select\" && __jsx(\"select\", _extends({\n      onChange: this.handleChange,\n      id: label,\n      value: field.value,\n      name: field.name\n    }, inputProps, {\n      className: `form-control${this.props.error ? ' is-invalid' : ''}`\n    }), __jsx(\"option\", {\n      value: \"test\"\n    }, \"test\")), this.props.type == \"check\" && __jsx(\"div\", {\n      className: \"form-check\"\n    }, __jsx(\"input\", {\n      className: \"form-check-input\",\n      type: \"checkbox\",\n      value: \"\",\n      id: \"defaultCheck2\"\n    }), __jsx(\"label\", {\n      className: \"form-check-label\",\n      htmlFor: \"defaultCheck2\"\n    }, \"Disabled checkbox\")), this.props.error && __jsx(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      className: \"invalid-feedback\"\n    }, this.props.error));\n  }\n\n}\n\nexport default (props => __jsx(Field, _extends({\n  component: TextInputWrappedInternal\n}, props)));","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","Component","Field","TextInputWrappedInternal","constructor","props","event","field","name","form","handleChange","render","label","inputProps","Object","assign","error","id","type","value","color"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,QAAtB;;AAEA,MAAMC,wBAAN,SAAuCF,SAAvC,CAAiD;AAC7CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,0CAIJC,KAAK,IAAI;AACpB,YAAM;AACFC,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF,SADL;AAEFC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AAFJ,UAGF,KAAKL,KAHT;AAKAK,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACH,KAXkB;AAElB;;AAWDK,EAAAA,MAAM,GAAG;AACL,UAAM;AAACJ,MAAAA,KAAD;AAAQK,MAAAA;AAAR,QAAiB,KAAKP,KAA5B;AAEA,UAAMQ,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKV,KAAvB,CAAnB;AAEA,WAAOQ,UAAU,CAACJ,IAAlB;AACA,WAAOI,UAAU,CAACD,KAAlB;AACA,WAAOC,UAAU,CAACN,KAAlB;AACA,WAAOM,UAAU,CAACG,KAAlB;AAEA,WACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACK,KAAKX,KAAL,CAAWO,KAAX,IACG;AAAO,MAAA,OAAO,EAAE,KAAKP,KAAL,CAAWY;AAA3B,OAAgCL,KAAhC,CAFR,EAIK,KAAKP,KAAL,CAAWa,IAAX,IAAmB,MAAnB,IACG;AACI,MAAA,QAAQ,EAAE,KAAKR,YADnB;AACiC,MAAA,EAAE,EAAEE,KADrC;AAC4C,MAAA,KAAK,EAAEL,KAAK,CAACY,KADzD;AACgE,MAAA,IAAI,EAAEZ,KAAK,CAACC;AAD5E,OACsFK,UADtF;AAEI,MAAA,SAAS,EAAG,eAAc,KAAKR,KAAL,CAAWW,KAAX,GAAmB,aAAnB,GAAmC,EAAG;AAFpE,OALR,EAUK,KAAKX,KAAL,CAAWa,IAAX,IAAmB,UAAnB,IACG;AACI,MAAA,QAAQ,EAAE,KAAKR,YADnB;AACiC,MAAA,EAAE,EAAEE,KADrC;AAC4C,MAAA,KAAK,EAAEL,KAAK,CAACY,KADzD;AACgE,MAAA,IAAI,EAAEZ,KAAK,CAACC;AAD5E,OACsFK,UADtF;AAEI,MAAA,SAAS,EAAG,eAAc,KAAKR,KAAL,CAAWW,KAAX,GAAmB,aAAnB,GAAmC,EAAG;AAFpE,OAXR,EAgBK,KAAKX,KAAL,CAAWa,IAAX,IAAmB,QAAnB,IACG;AACI,MAAA,QAAQ,EAAE,KAAKR,YADnB;AACiC,MAAA,EAAE,EAAEE,KADrC;AAC4C,MAAA,KAAK,EAAEL,KAAK,CAACY,KADzD;AACgE,MAAA,IAAI,EAAEZ,KAAK,CAACC;AAD5E,OACsFK,UADtF;AAEI,MAAA,SAAS,EAAG,eAAc,KAAKR,KAAL,CAAWW,KAAX,GAAmB,aAAnB,GAAmC,EAAG;AAFpE,QAII;AAAQ,MAAA,KAAK,EAAC;AAAd,cAJJ,CAjBR,EAwBK,KAAKX,KAAL,CAAWa,IAAX,IAAmB,OAAnB,IACG;AAAK,MAAA,SAAS,EAAC;AAAf,OACI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAoC,MAAA,IAAI,EAAC,UAAzC;AAAoD,MAAA,KAAK,EAAC,EAA1D;AAA6D,MAAA,EAAE,EAAC;AAAhE,MADJ,EAEI;AAAO,MAAA,SAAS,EAAC,kBAAjB;AAAoC,MAAA,OAAO,EAAC;AAA5C,2BAFJ,CAzBR,EAgCK,KAAKb,KAAL,CAAWW,KAAX,IACG;AAAK,MAAA,KAAK,EAAE;AAACI,QAAAA,KAAK,EAAE;AAAR,OAAZ;AAA4B,MAAA,SAAS,EAAC;AAAtC,OACK,KAAKf,KAAL,CAAWW,KADhB,CAjCR,CADJ;AAwCH;;AAhE4C;;AAmEjD,gBAAeX,KAAK,IAAI,MAAC,KAAD;AAAO,EAAA,SAAS,EAAEF;AAAlB,GAAgDE,KAAhD,EAAxB","sourcesContent":["import React, { Component } from 'react';\r\nimport { Field } from 'formik';\r\n\r\nclass TextInputWrappedInternal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const {\r\n            field: { name },\r\n            form: { handleChange }\r\n        } = this.props;\r\n\r\n        handleChange(event);\r\n    };\r\n\r\n    render() {\r\n        const {field, label} = this.props;\r\n\r\n        const inputProps = Object.assign({}, this.props);\r\n\r\n        delete inputProps.form;\r\n        delete inputProps.label;\r\n        delete inputProps.field;\r\n        delete inputProps.error;\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                {this.props.label &&\r\n                    <label htmlFor={this.props.id}>{label}</label>\r\n                }\r\n                {this.props.type == \"text\" &&\r\n                    <input\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                        className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                    />\r\n                }\r\n                {this.props.type == \"textarea\" &&\r\n                    <textarea\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                        className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                    />\r\n                }\r\n                {this.props.type == \"select\" &&\r\n                    <select\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                        className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                    >\r\n                        <option value=\"test\">test</option>\r\n                    </select>\r\n                }\r\n                {this.props.type == \"check\" &&\r\n                    <div className=\"form-check\">\r\n                        <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"defaultCheck2\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"defaultCheck2\">\r\n                            Disabled checkbox\r\n                        </label>\r\n                    </div>\r\n                }\r\n                {this.props.error &&\r\n                    <div style={{color: \"red\"}} className=\"invalid-feedback\">\r\n                        {this.props.error}\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n"]},"metadata":{},"sourceType":"module"}