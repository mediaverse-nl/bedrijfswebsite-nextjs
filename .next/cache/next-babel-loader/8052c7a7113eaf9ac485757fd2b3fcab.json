{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { Field } from \"formik\"; // Input feedback\n\nvar InputFeedback = function InputFeedback(_ref) {\n  var error = _ref.error;\n  return error ? __jsx(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    className: classNames(\"input-feedback\")\n  }, error) : null;\n}; // Checkbox input\n\n\nexport var Checkbox = function Checkbox(_ref2) {\n  var _ref2$field = _ref2.field,\n      name = _ref2$field.name,\n      value = _ref2$field.value,\n      onChange = _ref2$field.onChange,\n      onBlur = _ref2$field.onBlur,\n      _ref2$form = _ref2.form,\n      errors = _ref2$form.errors,\n      touched = _ref2$form.touched,\n      id = _ref2.id,\n      label = _ref2.label,\n      className = _ref2.className,\n      props = _objectWithoutProperties(_ref2, [\"field\", \"form\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"custom-control custom-checkbox\"\n  }, __jsx(\"input\", {\n    name: name,\n    id: id,\n    type: \"checkbox\",\n    value: value,\n    checked: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"custom-control-input\"\n  }), __jsx(\"label\", {\n    htmlFor: id,\n    className: \"custom-control-label\"\n  }, label), touched[name] && __jsx(InputFeedback, {\n    error: errors[name]\n  }));\n}; // Checkbox group\n\nexport var CheckboxGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckboxGroup, _React$Component);\n\n  function CheckboxGroup(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxGroup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxGroup).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      var target = event.currentTarget;\n      var valueArray = _toConsumableArray(_this.props.value) || [];\n\n      if (target.checked) {\n        valueArray.push(target.id);\n      } else {\n        valueArray.splice(valueArray.indexOf(target.id), 1);\n      }\n\n      _this.props.onChange(_this.props.id, valueArray);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function () {\n      // take care of touched\n      _this.props.onBlur(_this.props.id, true);\n    });\n\n    return _this;\n  }\n\n  _createClass(CheckboxGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          value = _this$props.value,\n          error = _this$props.error,\n          touched = _this$props.touched,\n          label = _this$props.label,\n          className = _this$props.className,\n          children = _this$props.children;\n      var classes = classNames(\"input-field\", \"form-group\", {\n        \"is-success\": value || !error && touched,\n        // handle prefilled or user-filled\n        \"is-error\": !!error && touched\n      }, className);\n      return __jsx(\"div\", {\n        className: classes\n      }, __jsx(\"label\", null, label), React.Children.map(children, function (child) {\n        return React.cloneElement(child, {\n          field: {\n            value: value.includes(child.props.id),\n            onChange: _this2.handleChange,\n            onBlur: _this2.handleBlur\n          }\n        });\n      }), touched && __jsx(InputFeedback, {\n        error: error\n      }));\n    }\n  }]);\n\n  return CheckboxGroup;\n}(React.Component); // Radio input\n\nexport var RadioButton = function RadioButton(_ref3) {\n  var _ref3$field = _ref3.field,\n      name = _ref3$field.name,\n      value = _ref3$field.value,\n      onChange = _ref3$field.onChange,\n      onBlur = _ref3$field.onBlur,\n      id = _ref3.id,\n      label = _ref3.label,\n      className = _ref3.className,\n      props = _objectWithoutProperties(_ref3, [\"field\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"custom-control custom-radio\"\n  }, __jsx(\"input\", _extends({\n    name: name,\n    id: id,\n    type: \"radio\",\n    value: value,\n    checked: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"custom-control-input\"\n  }, props)), __jsx(\"label\", {\n    htmlFor: id,\n    className: \"custom-control-label\"\n  }, label));\n}; // Radio group\n\nexport var RadioButtonGroup = function RadioButtonGroup(_ref4) {\n  var value = _ref4.value,\n      error = _ref4.error,\n      touched = _ref4.touched,\n      id = _ref4.id,\n      label = _ref4.label,\n      className = _ref4.className,\n      children = _ref4.children;\n  var classes = classNames(\"input-field\", {\n    \"is-success\": value || !error && touched,\n    // handle prefilled or user-filled\n    \"is-error\": !!error && touched\n  }, className);\n  return __jsx(\"div\", {\n    className: classNames(\"form-group\")\n  }, __jsx(\"label\", null, label), children, touched && __jsx(InputFeedback, {\n    error: error\n  }));\n};\nexport var SelectField = function SelectField(props) {\n  return __jsx(Field, _extends({\n    type: \"select\",\n    component: InputField\n  }, props));\n};\nexport var TextField = function TextField(props) {\n  return __jsx(Field, _extends({\n    type: \"text\",\n    component: InputField\n  }, props));\n};\nexport var TextareaField = function TextareaField(props) {\n  return __jsx(Field, _extends({\n    type: \"textarea\",\n    component: InputField\n  }, props));\n};\nexport var InputField = /*#__PURE__*/function (_React$Component2) {\n  _inherits(InputField, _React$Component2);\n\n  function InputField(props) {\n    var _this3;\n\n    _classCallCheck(this, InputField);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(InputField).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this3), \"handleChange\", function (event) {\n      var _this3$props = _this3.props,\n          name = _this3$props.field.name,\n          handleChange = _this3$props.form.handleChange;\n      handleChange(event);\n    });\n\n    return _this3;\n  }\n\n  _createClass(InputField, [{\n    key: \"renderSwitch\",\n    value: function renderSwitch(type) {\n      switch (type) {\n        case 'textarea':\n          return __jsx(TextareaInput, _extends({}, this.props, {\n            onChange: this.handleChange\n          }));\n\n        case 'text':\n          return __jsx(TextInput, _extends({}, this.props, {\n            onChange: this.handleChange\n          }));\n\n        case 'email':\n          return __jsx(EmailInput, _extends({}, this.props, {\n            onChange: this.handleChange\n          }));\n\n        default:\n          return;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var label = this.props.label;\n      var inputProps = Object.assign({}, this.props);\n      delete inputProps.form;\n      delete inputProps.field;\n      delete inputProps.error;\n      delete inputProps.values;\n      console.log(this.props.type);\n      return __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"style\", null, \"\\n                    \\n                \"), __jsx(\"label\", null, label), this.renderSwitch(this.props.type), this.props.error && __jsx(InputFeedback, {\n        error: this.props.error\n      }));\n    }\n  }]);\n\n  return InputField;\n}(React.Component); // const get = (type) => {\n//     switch (type) {\n//         case '/':\n//         case '/report':\n//         case '/report/lesson_class':\n//             const ReportSideBar = require('containers/layouts/admin/sidebars/report-sidebar').default\n//             return <ReportSideBar />\n//         default:\n//             return null\n//     }\n// }\n\nexport var TextareaInput = function TextareaInput(props) {\n  return __jsx(\"textarea\", _extends({\n    rows: \"5\",\n    className: \"form-control\".concat(props.error ? ' is-invalid' : ''),\n    onChange: props.onChange,\n    id: props.label\n  }, props));\n};\nexport var EmailInput = function EmailInput(props) {\n  return __jsx(\"input\", _extends({\n    className: \"form-control\".concat(props.error ? ' is-invalid' : ''),\n    onChange: props.onChange,\n    id: props.label\n  }, props));\n};\nexport var TextInput = function TextInput(props) {\n  return __jsx(\"input\", _extends({\n    className: \"form-control\".concat(props.error ? ' is-invalid' : ''),\n    onChange: props.onChange,\n    id: props.label\n  }, props));\n};\n{\n  /*<CheckboxGroup*/\n}\n{\n  /*    id=\"pets\"*/\n}\n{\n  /*    label=\"Which of these?\"*/\n}\n{\n  /*    value={values.pets}*/\n}\n{\n  /*    error={errors.pets}*/\n}\n{\n  /*    touched={touched.pets}*/\n}\n{\n  /*    onChange={setFieldValue}*/\n}\n{\n  /*    onBlur={setFieldTouched}*/\n}\n{\n  /*>*/\n}\n{\n  /*    {Object.keys(testArray).map(function(name, index) {*/\n}\n{\n  /*        return (*/\n}\n{\n  /*            <Field*/\n}\n{\n  /*                key={index}*/\n}\n{\n  /*                component={Checkbox}*/\n}\n{\n  /*                id={name}*/\n}\n{\n  /*                label={name}*/\n}\n{\n  /*            />*/\n}\n{\n  /*        )*/\n}\n{\n  /*    })}*/\n}\n{\n  /*</CheckboxGroup>*/\n}\n{\n  /*<RadioButtonGroup*/\n}\n{\n  /*id=\"radio\"*/\n}\n{\n  /*label=\"One of these please\"*/\n}\n{\n  /*value={values.radio}*/\n}\n{\n  /*error={errors.radio}*/\n}\n{\n  /*touched={touched.radio}*/\n}\n{\n  /*    >*/\n}\n{\n  /*    {Object.keys(testArray).map(function(name, index) {*/\n}\n{\n  /*            return (*/\n}\n{\n  /*                <Field*/\n}\n{\n  /*                    key={index}*/\n}\n{\n  /*                    component={RadioButton}*/\n}\n{\n  /*                    name=\"radio\"*/\n}\n{\n  /*                    id={name}*/\n}\n{\n  /*                    label={name}*/\n}\n{\n  /*                />*/\n}\n{\n  /*            )*/\n}\n{\n  /*        })}*/\n}\n{}\n/*</RadioButtonGroup>*/\n// class TextInputWrappedInternal extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//\n//     handleChange = event => {\n//         const {\n//             field: { name },\n//             form: { handleChange }\n//         } = this.props;\n//\n//         handleChange(event);\n//     };\n//\n//     render() {\n//         const {field, label} = this.props;\n//\n//         const inputProps = Object.assign({}, this.props);\n//\n//         delete inputProps.form;\n//         delete inputProps.label;\n//         delete inputProps.field;\n//         delete inputProps.error;\n//         delete inputProps.values;\n//\n//         const map = { a: 1, b: 2, c: 3 };\n//\n//         return (\n//             <div className=\"form-group\">\n//                 {/*label of input*/}\n//                 {this.props.label &&\n//                     <label htmlFor={this.props.id}>{label}</label>\n//                 }\n//\n//                 {/*text input*/}\n//                 {this.props.type == \"text\" &&\n//                     <input\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*textarea input*/}\n//                 {this.props.type == \"textarea\" &&\n//                     <textarea\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*select input*/}\n//                 {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\n//                     <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                     >\n//                         {Object.keys(this.props.values).map(function(name, index){\n//                             return (\n//                                 <option key={index} value={index}>\n//                                     {name}\n//                                 </option>\n//                             )\n//                         })}\n//                     </select>\n//                 }\n//\n//                 {/*{console.log('field', this)}*/}\n//                 {/*/!*checkbox input*!/*/}\n//                 {/*<label htmlFor=\"\">pets</label>*/}\n//                 {/*<FieldArray name=\"pets\">*/}\n//                 {/*    {(arrayHelper) => (*/}\n//                 {/*        <div>*/}\n//                 {/*            {console.log('-------------------------', this.props)}*/}\n//                 {/*            /!*{this.props.values.map(pet => (*!/*/}\n//                 {/*            /!*    <div key={pet.name}>*!/*/}\n//\n//                 {/*            /!*    </div>*!/*/}\n//                 {/*            /!*))}*!/*/}\n//                 {/*        </div>*/}\n//                 {/*    )}*/}\n//                 {/*</FieldArray>*/}\n//                 {/*<label htmlFor=\"\">end pets</label>*/}\n//\n//\n//                 {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\n//                     <div>\n//                         {console.log(this.handleChange.bind(this))}\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"1\" id=\"1\" {...inputProps}\n//                                 // onChange={this.handleChange}\n//                                    onChange={(event) => {\n//                                        console.log(\"========================\",event, this);\n//                                        const value = event.target.checked ? 'a' : null\n//                                        console.log(\"========================2\",value);\n//\n//                                        // this.props.setFieldValue('pets.0', value)\n//                                    }}\n//                                    // checked={ }\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"2\" id=\"1\" {...inputProps}\n//                                 onChange={this.handleChange}\n//\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                     </div>\n// Object.keys(this.props.values).map(function(name, index){\n//     {console.log('test hier --------------------------------', index, name, inputProps)}\n//     return (\n//         <div className=\"form-check\" key={index}>\n//             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\n//                     // onChange={this.handleChange}\n//\n//                    // checked={values.check}\n//                    // onChange={() => setFieldValue(\"check\", !values.check)}\n//             />\n//             <label className=\"form-check-label\" htmlFor={name+index}>\n//                 {name}\n//             </label>\n//         </div>\n//     )\n// })\n// }\n\n/*\r\n                {/!*!/!*radio input*!/!*!/}\r\n                {/!*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*!/}\r\n                {/!*    Object.keys(this.props.values).map(function(name, index){*!/}\r\n                {/!*        return (*!/}\r\n                {/!*            <div className=\"form-check\" key={index}>*!/}\r\n                {/!*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*!/}\r\n                {/!*                <label className=\"form-check-label\" htmlFor={name+index}>*!/}\r\n                {/!*                    {name}*!/}\r\n                {/!*                </label>*!/}\r\n                {/!*            </div>*!/}\r\n                {/!*        )*!/}\r\n                {/!*    })*!/}\r\n                {/!*}*!/}*/\n//                 {this.props.error &&\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">\n//                         {this.props.error}\n//                     </div>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// export default props => <Field component={TextInputWrappedInternal} {...props} />;","map":null,"metadata":{},"sourceType":"module"}