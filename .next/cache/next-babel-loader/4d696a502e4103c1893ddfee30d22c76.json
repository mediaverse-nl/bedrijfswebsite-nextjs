{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nclass TextInputWrappedInternal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", event => {\n      const {\n        field: {\n          name\n        },\n        form: {\n          handleChange,\n          setFieldTouched\n        }\n      } = this.props;\n\n      if (!this.touched) {\n        this.touched = true;\n        setFieldTouched(name, true);\n      }\n\n      handleChange(event);\n    });\n\n    this.touched = false;\n  }\n\n  render() {\n    const {\n      field,\n      label\n    } = this.props;\n    return __jsx(\"input\", _extends({\n      onChange: this.handleChange,\n      value: field.value,\n      name: field.name,\n      label: label\n    }, this.props));\n  }\n\n}\n\n_defineProperty(TextInputWrappedInternal, \"propTypes\", {\n  field: PropTypes.shape().isRequired,\n  form: PropTypes.shape().isRequired,\n  label: PropTypes.string.isRequired\n});\n\nexport default (props => __jsx(Field, _extends({\n  component: TextInputWrappedInternal\n}, props))); // import React from \"react\";\n// import {Formik, Field, FieldProps} from \"formik\"\n//\n// export default class InputField extends React.Component {\n//     field = () => {\n//         return (\n//             <div className=\"form-group\">\n//                 {props.label && <label htmlFor={props.id}>{props.label}</label>}\n//                 <input\n//\n//                     type={props.type}\n//                     name={props.fieldName}\n//                     onChange={props.handleChange}\n//                     onBlur={props.handleBlur}\n//                     value={props.value}\n//                     className={`form-control ${props.error ? 'is-invalid' : ''}`}\n//                 />\n//                 {props.error &&\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">{props.error}</div>\n//                 }\n//             </div>\n//         );\n//     }\n//\n//     render() {\n//         // const componentToRender = this.props.component;\n//\n//         return <Field {...this.props} component={this.field} />;\n//     }\n// }","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","Component","Field","PropTypes","TextInputWrappedInternal","constructor","props","event","field","name","form","handleChange","setFieldTouched","touched","render","label","value","shape","isRequired","string"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,wBAAN,SAAuCH,SAAvC,CAAiD;AAO7CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,0CAMJC,KAAK,IAAI;AACpB,YAAM;AACFC,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF,SADL;AAEFC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,YAAF;AAAgBC,UAAAA;AAAhB;AAFJ,UAGF,KAAKN,KAHT;;AAKA,UAAI,CAAC,KAAKO,OAAV,EAAmB;AACf,aAAKA,OAAL,GAAe,IAAf;AACAD,QAAAA,eAAe,CAACH,IAAD,EAAO,IAAP,CAAf;AACH;;AAEDE,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACH,KAlBkB;;AAGf,SAAKM,OAAL,GAAe,KAAf;AACH;;AAgBDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEN,MAAAA,KAAF;AAASO,MAAAA;AAAT,QAAmB,KAAKT,KAA9B;AAEA,WACI;AAAO,MAAA,QAAQ,EAAE,KAAKK,YAAtB;AAAoC,MAAA,KAAK,EAAEH,KAAK,CAACQ,KAAjD;AAAwD,MAAA,IAAI,EAAER,KAAK,CAACC,IAApE;AAA0E,MAAA,KAAK,EAAEM;AAAjF,OAA4F,KAAKT,KAAjG,EADJ;AAGH;;AAjC4C;;gBAA3CF,wB,eACiB;AACfI,EAAAA,KAAK,EAAEL,SAAS,CAACc,KAAV,GAAkBC,UADV;AAEfR,EAAAA,IAAI,EAAEP,SAAS,CAACc,KAAV,GAAkBC,UAFT;AAGfH,EAAAA,KAAK,EAAEZ,SAAS,CAACgB,MAAV,CAAiBD;AAHT,C;;AAmCvB,gBAAeZ,KAAK,IAAI,MAAC,KAAD;AAAO,EAAA,SAAS,EAAEF;AAAlB,GAAgDE,KAAhD,EAAxB,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\r\nimport { Field } from 'formik';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TextInputWrappedInternal extends Component {\r\n    static propTypes = {\r\n        field: PropTypes.shape().isRequired,\r\n        form: PropTypes.shape().isRequired,\r\n        label: PropTypes.string.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.touched = false;\r\n    }\r\n\r\n    handleChange = event => {\r\n        const {\r\n            field: { name },\r\n            form: { handleChange, setFieldTouched }\r\n        } = this.props;\r\n\r\n        if (!this.touched) {\r\n            this.touched = true;\r\n            setFieldTouched(name, true);\r\n        }\r\n\r\n        handleChange(event);\r\n    };\r\n\r\n    render() {\r\n        const { field, label } = this.props;\r\n\r\n        return (\r\n            <input onChange={this.handleChange} value={field.value} name={field.name} label={label} {...this.props} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n\r\n// import React from \"react\";\r\n// import {Formik, Field, FieldProps} from \"formik\"\r\n//\r\n// export default class InputField extends React.Component {\r\n//     field = () => {\r\n//         return (\r\n//             <div className=\"form-group\">\r\n//                 {props.label && <label htmlFor={props.id}>{props.label}</label>}\r\n//                 <input\r\n//\r\n//                     type={props.type}\r\n//                     name={props.fieldName}\r\n//                     onChange={props.handleChange}\r\n//                     onBlur={props.handleBlur}\r\n//                     value={props.value}\r\n//                     className={`form-control ${props.error ? 'is-invalid' : ''}`}\r\n//                 />\r\n//                 {props.error &&\r\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">{props.error}</div>\r\n//                 }\r\n//             </div>\r\n//         );\r\n//     }\r\n//\r\n//     render() {\r\n//         // const componentToRender = this.props.component;\r\n//\r\n//         return <Field {...this.props} component={this.field} />;\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}