{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nvar TextInputWrappedInternal = /*#__PURE__*/function (_Component) {\n  _inherits(TextInputWrappedInternal, _Component);\n\n  function TextInputWrappedInternal(props) {\n    var _this;\n\n    _classCallCheck(this, TextInputWrappedInternal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextInputWrappedInternal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      var _this$props = _this.props,\n          name = _this$props.field.name,\n          _this$props$form = _this$props.form,\n          handleChange = _this$props$form.handleChange,\n          setFieldTouched = _this$props$form.setFieldTouched;\n\n      if (!_this.touched) {\n        _this.touched = true;\n        setFieldTouched(name, true);\n      }\n\n      handleChange(event);\n    });\n\n    _this.touched = false;\n    return _this;\n  }\n\n  _createClass(TextInputWrappedInternal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          field = _this$props2.field,\n          label = _this$props2.label;\n      return __jsx(\"div\", {\n        className: \"form-group\"\n      }, this.props.label && __jsx(\"label\", {\n        htmlFor: this.props.id\n      }, this.props.label), __jsx(\"input\", _extends({\n        onChange: this.handleChange,\n        value: field.value,\n        name: field.name,\n        label: label\n      }, this.props, {\n        className: \"form-control \".concat(props.error ? 'is-invalid' : '')\n      })), props.error && __jsx(\"div\", {\n        style: {\n          color: \"red\"\n        },\n        className: \"invalid-feedback\"\n      }, props.error));\n    }\n  }]);\n\n  return TextInputWrappedInternal;\n}(Component);\n\n_defineProperty(TextInputWrappedInternal, \"propTypes\", {\n  field: PropTypes.shape().isRequired,\n  form: PropTypes.shape().isRequired,\n  label: PropTypes.string.isRequired\n});\n\nexport default (function (props) {\n  return __jsx(Field, _extends({\n    component: TextInputWrappedInternal\n  }, props));\n}); // import React from \"react\";\n// import {Formik, Field, FieldProps} from \"formik\"\n//\n// export default class InputField extends React.Component {\n//     field = () => {\n//         return (\n//             <div className=\"form-group\">\n//                 {props.label && <label htmlFor={props.id}>{props.label}</label>}\n//                 <input\n//\n//                     type={props.type}\n//                     name={props.fieldName}\n//                     onChange={props.handleChange}\n//                     onBlur={props.handleBlur}\n//                     value={props.value}\n//                     className={`form-control ${props.error ? 'is-invalid' : ''}`}\n//                 />\n//                 {props.error &&\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">{props.error}</div>\n//                 }\n//             </div>\n//         );\n//     }\n//\n//     render() {\n//         // const componentToRender = this.props.component;\n//\n//         return <Field {...this.props} component={this.field} />;\n//     }\n// }","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","Component","Field","PropTypes","TextInputWrappedInternal","props","event","name","field","form","handleChange","setFieldTouched","touched","label","id","value","error","color","shape","isRequired","string"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;IAEMC,wB;;;AAOF,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kGAAMA,KAAN;;AADe,mEAMJ,UAAAC,KAAK,EAAI;AAAA,wBAIhB,MAAKD,KAJW;AAAA,UAEPE,IAFO,eAEhBC,KAFgB,CAEPD,IAFO;AAAA,yCAGhBE,IAHgB;AAAA,UAGRC,YAHQ,oBAGRA,YAHQ;AAAA,UAGMC,eAHN,oBAGMA,eAHN;;AAMpB,UAAI,CAAC,MAAKC,OAAV,EAAmB;AACf,cAAKA,OAAL,GAAe,IAAf;AACAD,QAAAA,eAAe,CAACJ,IAAD,EAAO,IAAP,CAAf;AACH;;AAEDG,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACH,KAlBkB;;AAGf,UAAKM,OAAL,GAAe,KAAf;AAHe;AAIlB;;;;6BAgBQ;AAAA,yBACoB,KAAKP,KADzB;AAAA,UACGG,KADH,gBACGA,KADH;AAAA,UACUK,KADV,gBACUA,KADV;AAGL,aACI;AAAK,QAAA,SAAS,EAAC;AAAf,SACK,KAAKR,KAAL,CAAWQ,KAAX,IAAoB;AAAO,QAAA,OAAO,EAAE,KAAKR,KAAL,CAAWS;AAA3B,SAAgC,KAAKT,KAAL,CAAWQ,KAA3C,CADzB,EAEI;AACI,QAAA,QAAQ,EAAE,KAAKH,YADnB;AACiC,QAAA,KAAK,EAAEF,KAAK,CAACO,KAD9C;AACqD,QAAA,IAAI,EAAEP,KAAK,CAACD,IADjE;AACuE,QAAA,KAAK,EAAEM;AAD9E,SACyF,KAAKR,KAD9F;AAEI,QAAA,SAAS,yBAAkBA,KAAK,CAACW,KAAN,GAAc,YAAd,GAA6B,EAA/C;AAFb,SAFJ,EAMKX,KAAK,CAACW,KAAN,IACD;AAAK,QAAA,KAAK,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAA4B,QAAA,SAAS,EAAC;AAAtC,SAA0DZ,KAAK,CAACW,KAAhE,CAPJ,CADJ;AAYH;;;;EA1CkCf,S;;gBAAjCG,wB,eACiB;AACfI,EAAAA,KAAK,EAAEL,SAAS,CAACe,KAAV,GAAkBC,UADV;AAEfV,EAAAA,IAAI,EAAEN,SAAS,CAACe,KAAV,GAAkBC,UAFT;AAGfN,EAAAA,KAAK,EAAEV,SAAS,CAACiB,MAAV,CAAiBD;AAHT,C;;AA4CvB,gBAAe,UAAAd,KAAK;AAAA,SAAI,MAAC,KAAD;AAAO,IAAA,SAAS,EAAED;AAAlB,KAAgDC,KAAhD,EAAJ;AAAA,CAApB,E,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from 'react';\r\nimport { Field } from 'formik';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TextInputWrappedInternal extends Component {\r\n    static propTypes = {\r\n        field: PropTypes.shape().isRequired,\r\n        form: PropTypes.shape().isRequired,\r\n        label: PropTypes.string.isRequired\r\n    };\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.touched = false;\r\n    }\r\n\r\n    handleChange = event => {\r\n        const {\r\n            field: { name },\r\n            form: { handleChange, setFieldTouched }\r\n        } = this.props;\r\n\r\n        if (!this.touched) {\r\n            this.touched = true;\r\n            setFieldTouched(name, true);\r\n        }\r\n\r\n        handleChange(event);\r\n    };\r\n\r\n    render() {\r\n        const { field, label } = this.props;\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                {this.props.label && <label htmlFor={this.props.id}>{this.props.label}</label>}\r\n                <input\r\n                    onChange={this.handleChange} value={field.value} name={field.name} label={label} {...this.props}\r\n                    className={`form-control ${props.error ? 'is-invalid' : ''}`}\r\n                />\r\n                {props.error &&\r\n                <div style={{color: \"red\"}} className=\"invalid-feedback\">{props.error}</div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n\r\n// import React from \"react\";\r\n// import {Formik, Field, FieldProps} from \"formik\"\r\n//\r\n// export default class InputField extends React.Component {\r\n//     field = () => {\r\n//         return (\r\n//             <div className=\"form-group\">\r\n//                 {props.label && <label htmlFor={props.id}>{props.label}</label>}\r\n//                 <input\r\n//\r\n//                     type={props.type}\r\n//                     name={props.fieldName}\r\n//                     onChange={props.handleChange}\r\n//                     onBlur={props.handleBlur}\r\n//                     value={props.value}\r\n//                     className={`form-control ${props.error ? 'is-invalid' : ''}`}\r\n//                 />\r\n//                 {props.error &&\r\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">{props.error}</div>\r\n//                 }\r\n//             </div>\r\n//         );\r\n//     }\r\n//\r\n//     render() {\r\n//         // const componentToRender = this.props.component;\r\n//\r\n//         return <Field {...this.props} component={this.field} />;\r\n//     }\r\n// }"]},"metadata":{},"sourceType":"module"}