{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Field, FieldArray } from 'formik';\n\nclass TextInputWrappedInternal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", event => {\n      const {\n        field: {\n          name\n        },\n        form: {\n          handleChange\n        }\n      } = this.props;\n      handleChange(event);\n    });\n  }\n\n  render() {\n    const {\n      field,\n      label\n    } = this.props;\n    const inputProps = Object.assign({}, this.props);\n    delete inputProps.form;\n    delete inputProps.label;\n    delete inputProps.field;\n    delete inputProps.error;\n    delete inputProps.values;\n    const map = {\n      a: 1,\n      b: 2,\n      c: 3\n    };\n    return __jsx(\"div\", {\n      className: \"form-group\"\n    }, this.props.label && __jsx(\"label\", {\n      htmlFor: this.props.id\n    }, label), this.props.type == \"text\" && __jsx(\"input\", _extends({\n      onChange: this.handleChange,\n      id: label,\n      value: field.value,\n      name: field.name\n    }, inputProps, {\n      className: `form-control${this.props.error ? ' is-invalid' : ''}`\n    })), this.props.type == \"textarea\" && __jsx(\"textarea\", _extends({\n      onChange: this.handleChange,\n      id: label,\n      value: field.value,\n      name: field.name\n    }, inputProps, {\n      className: `form-control${this.props.error ? ' is-invalid' : ''}`\n    })), this.props.type == \"select\" && typeof this.props.values !== \"undefined\" && __jsx(\"select\", _extends({\n      className: `form-control${this.props.error ? ' is-invalid' : ''}`,\n      onChange: this.handleChange,\n      id: label,\n      value: field.value,\n      name: field.name\n    }, inputProps), Object.keys(this.props.values).map(function (name, index) {\n      return __jsx(\"option\", {\n        key: index,\n        value: index\n      }, name);\n    })), console.log('field', this), __jsx(\"label\", {\n      htmlFor: \"\"\n    }, \"pets\"), __jsx(FieldArray, {\n      name: \"pets\"\n    }, arrayHelper => __jsx(\"div\", null, console.log('-------------------------', this.props))), __jsx(\"label\", {\n      htmlFor: \"\"\n    }, \"end pets\"), this.props.type == \"checkbox\" && typeof this.props.values === 'object' && __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"form-check\",\n      key: index\n    }, __jsx(\"input\", _extends({\n      className: \"form-check-input\",\n      type: \"checkbox\",\n      name: field.name,\n      value: name,\n      id: name + index\n    }, inputProps)), __jsx(\"label\", {\n      className: \"form-check-label\",\n      htmlFor: name + index\n    }, name))) // Object.keys(this.props.values).map(function(name, index){\n    //     {console.log('test hier --------------------------------', index, name, inputProps)}\n    //     return (\n    //         <div className=\"form-check\" key={index}>\n    //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\n    //                     // onChange={this.handleChange}\n    //\n    //                    // checked={values.check}\n    //                    // onChange={() => setFieldValue(\"check\", !values.check)}\n    //             />\n    //             <label className=\"form-check-label\" htmlFor={name+index}>\n    //                 {name}\n    //             </label>\n    //         </div>\n    //     )\n    // })\n    , this.props.error && __jsx(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      className: \"invalid-feedback\"\n    }, this.props.error));\n  }\n\n}\n\nexport default (props => __jsx(Field, _extends({\n  component: TextInputWrappedInternal\n}, props)));","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","Component","Field","FieldArray","TextInputWrappedInternal","constructor","props","event","field","name","form","handleChange","render","label","inputProps","Object","assign","error","values","map","a","b","c","id","type","value","keys","index","console","log","arrayHelper","color"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Field, FieldArray } from 'formik';\r\n\r\nclass TextInputWrappedInternal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const {\r\n            field: { name },\r\n            form: { handleChange }\r\n        } = this.props;\r\n\r\n        handleChange(event);\r\n    };\r\n\r\n    render() {\r\n        const {field, label} = this.props;\r\n\r\n        const inputProps = Object.assign({}, this.props);\r\n\r\n        delete inputProps.form;\r\n        delete inputProps.label;\r\n        delete inputProps.field;\r\n        delete inputProps.error;\r\n        delete inputProps.values;\r\n\r\n        const map = { a: 1, b: 2, c: 3 };\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                {/*label of input*/}\r\n                {this.props.label &&\r\n                    <label htmlFor={this.props.id}>{label}</label>\r\n                }\r\n\r\n                {/*text input*/}\r\n                {this.props.type == \"text\" &&\r\n                    <input\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                        className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                    />\r\n                }\r\n\r\n                {/*textarea input*/}\r\n                {this.props.type == \"textarea\" &&\r\n                    <textarea\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                        className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                    />\r\n                }\r\n\r\n                {/*select input*/}\r\n                {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\r\n                    <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                    >\r\n                        {Object.keys(this.props.values).map(function(name, index){\r\n                            return (\r\n                                <option key={index} value={index}>\r\n                                    {name}\r\n                                </option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                }\r\n\r\n                {console.log('field', this)}\r\n                {/*checkbox input*/}\r\n                <label htmlFor=\"\">pets</label>\r\n                <FieldArray name=\"pets\">\r\n                    {(arrayHelper) => (\r\n                        <div>\r\n                            {console.log('-------------------------', this.props)}\r\n                            {/*{this.props.values.map(pet => (*/}\r\n                            {/*    <div key={pet.name}>*/}\r\n\r\n                            {/*    </div>*/}\r\n                            {/*))}*/}\r\n                        </div>\r\n                    )}\r\n                </FieldArray>\r\n                <label htmlFor=\"\">end pets</label>\r\n\r\n\r\n                {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\r\n                    <div>\r\n                        <div className=\"form-check\" key={index}>\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\r\n                                // onChange={this.handleChange}\r\n\r\n                                // checked={values.check}\r\n                                // onChange={() => setFieldValue(\"check\", !values.check)}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor={name+index}>\r\n                                {name}\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    // Object.keys(this.props.values).map(function(name, index){\r\n                    //     {console.log('test hier --------------------------------', index, name, inputProps)}\r\n                    //     return (\r\n                    //         <div className=\"form-check\" key={index}>\r\n                    //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\r\n                    //                     // onChange={this.handleChange}\r\n                    //\r\n                    //                    // checked={values.check}\r\n                    //                    // onChange={() => setFieldValue(\"check\", !values.check)}\r\n                    //             />\r\n                    //             <label className=\"form-check-label\" htmlFor={name+index}>\r\n                    //                 {name}\r\n                    //             </label>\r\n                    //         </div>\r\n                    //     )\r\n                    // })\r\n                }\r\n\r\n                {/*/!*radio input*!/*/}\r\n                {/*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*/}\r\n                {/*    Object.keys(this.props.values).map(function(name, index){*/}\r\n                {/*        return (*/}\r\n                {/*            <div className=\"form-check\" key={index}>*/}\r\n                {/*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*/}\r\n                {/*                <label className=\"form-check-label\" htmlFor={name+index}>*/}\r\n                {/*                    {name}*/}\r\n                {/*                </label>*/}\r\n                {/*            </div>*/}\r\n                {/*        )*/}\r\n                {/*    })*/}\r\n                {/*}*/}\r\n\r\n                {/*field error*/}\r\n                {this.props.error &&\r\n                    <div style={{color: \"red\"}} className=\"invalid-feedback\">\r\n                        {this.props.error}\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n"]},"metadata":{},"sourceType":"module"}