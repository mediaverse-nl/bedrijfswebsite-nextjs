{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport classNames from \"classnames\"; // Input feedback\n\nvar InputFeedback = function InputFeedback(_ref) {\n  var error = _ref.error;\n  return error ? __jsx(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    className: classNames(\"input-feedback\")\n  }, error) : null;\n}; // Checkbox input\n\n\nexport var TextField = function TextField(_ref2) {\n  var id = _ref2.id,\n      label = _ref2.label,\n      className = _ref2.className,\n      props = _objectWithoutProperties(_ref2, [\"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"form-control\"\n  }, __jsx(\"label\", {\n    htmlFor: id,\n    className: \"custom-control-label\"\n  }, label), __jsx(\"input\", _extends({\n    // name={name}\n    id: value,\n    type: \"radio\",\n    value: id,\n    checked: id === value,\n    onChange: onChange,\n    onBlur: onBlur\n  }, props)), touched[name] && __jsx(InputFeedback, {\n    error: errors[name]\n  }));\n}; // Checkbox input\n\nexport var Checkbox = function Checkbox(_ref3) {\n  var _ref3$field = _ref3.field,\n      name = _ref3$field.name,\n      value = _ref3$field.value,\n      onChange = _ref3$field.onChange,\n      onBlur = _ref3$field.onBlur,\n      _ref3$form = _ref3.form,\n      errors = _ref3$form.errors,\n      touched = _ref3$form.touched,\n      id = _ref3.id,\n      label = _ref3.label,\n      className = _ref3.className,\n      props = _objectWithoutProperties(_ref3, [\"field\", \"form\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"custom-control custom-checkbox\"\n  }, __jsx(\"input\", {\n    name: name,\n    id: id,\n    type: \"checkbox\",\n    value: value,\n    checked: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"custom-control-input\"\n  }), __jsx(\"label\", {\n    htmlFor: id,\n    className: \"custom-control-label\"\n  }, label), touched[name] && __jsx(InputFeedback, {\n    error: errors[name]\n  }));\n}; // Checkbox group\n\nexport var CheckboxGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckboxGroup, _React$Component);\n\n  function CheckboxGroup(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxGroup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxGroup).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      var target = event.currentTarget;\n      var valueArray = _toConsumableArray(_this.props.value) || [];\n\n      if (target.checked) {\n        valueArray.push(target.id);\n      } else {\n        valueArray.splice(valueArray.indexOf(target.id), 1);\n      }\n\n      _this.props.onChange(_this.props.id, valueArray);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function () {\n      // take care of touched\n      _this.props.onBlur(_this.props.id, true);\n    });\n\n    return _this;\n  }\n\n  _createClass(CheckboxGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          value = _this$props.value,\n          error = _this$props.error,\n          touched = _this$props.touched,\n          label = _this$props.label,\n          className = _this$props.className,\n          children = _this$props.children;\n      var classes = classNames(\"input-field\", \"form-group\", {\n        \"is-success\": value || !error && touched,\n        // handle prefilled or user-filled\n        \"is-error\": !!error && touched\n      }, className);\n      return __jsx(\"div\", {\n        className: classes\n      }, __jsx(\"label\", null, label), React.Children.map(children, function (child) {\n        return React.cloneElement(child, {\n          field: {\n            value: value.includes(child.props.id),\n            onChange: _this2.handleChange,\n            onBlur: _this2.handleBlur\n          }\n        });\n      }), touched && __jsx(InputFeedback, {\n        error: error\n      }));\n    }\n  }]);\n\n  return CheckboxGroup;\n}(React.Component); // Radio input\n\nexport var RadioButton = function RadioButton(_ref4) {\n  var _ref4$field = _ref4.field,\n      name = _ref4$field.name,\n      value = _ref4$field.value,\n      onChange = _ref4$field.onChange,\n      onBlur = _ref4$field.onBlur,\n      id = _ref4.id,\n      label = _ref4.label,\n      className = _ref4.className,\n      props = _objectWithoutProperties(_ref4, [\"field\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"custom-control custom-radio\"\n  }, __jsx(\"input\", _extends({\n    name: name,\n    id: value,\n    type: \"radio\",\n    value: id,\n    checked: id === value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: classNames(\"custom-control-input\")\n  }, props)), __jsx(\"label\", {\n    htmlFor: value,\n    className: \"custom-control-label\"\n  }, label));\n}; // Radio group\n\nexport var RadioButtonGroup = function RadioButtonGroup(_ref5) {\n  var value = _ref5.value,\n      error = _ref5.error,\n      touched = _ref5.touched,\n      id = _ref5.id,\n      label = _ref5.label,\n      className = _ref5.className,\n      children = _ref5.children;\n  var classes = classNames(\"input-field\", {\n    \"is-success\": value || !error && touched,\n    // handle prefilled or user-filled\n    \"is-error\": !!error && touched\n  }, className);\n  return __jsx(\"div\", {\n    className: classNames(\"form-group\")\n  }, __jsx(\"label\", null, label), children, touched && __jsx(InputFeedback, {\n    error: error\n  }));\n}; // import React, { Component } from 'react';\n// import { Field, FieldArray } from 'formik';\n//\n// class TextInputWrappedInternal extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//\n//     handleChange = event => {\n//         const {\n//             field: { name },\n//             form: { handleChange }\n//         } = this.props;\n//\n//         handleChange(event);\n//     };\n//\n//     render() {\n//         const {field, label} = this.props;\n//\n//         const inputProps = Object.assign({}, this.props);\n//\n//         delete inputProps.form;\n//         delete inputProps.label;\n//         delete inputProps.field;\n//         delete inputProps.error;\n//         delete inputProps.values;\n//\n//         const map = { a: 1, b: 2, c: 3 };\n//\n//         return (\n//             <div className=\"form-group\">\n//                 {/*label of input*/}\n//                 {this.props.label &&\n//                     <label htmlFor={this.props.id}>{label}</label>\n//                 }\n//\n//                 {/*text input*/}\n//                 {this.props.type == \"text\" &&\n//                     <input\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*textarea input*/}\n//                 {this.props.type == \"textarea\" &&\n//                     <textarea\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*select input*/}\n//                 {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\n//                     <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                     >\n//                         {Object.keys(this.props.values).map(function(name, index){\n//                             return (\n//                                 <option key={index} value={index}>\n//                                     {name}\n//                                 </option>\n//                             )\n//                         })}\n//                     </select>\n//                 }\n//\n//                 {/*{console.log('field', this)}*/}\n//                 {/*/!*checkbox input*!/*/}\n//                 {/*<label htmlFor=\"\">pets</label>*/}\n//                 {/*<FieldArray name=\"pets\">*/}\n//                 {/*    {(arrayHelper) => (*/}\n//                 {/*        <div>*/}\n//                 {/*            {console.log('-------------------------', this.props)}*/}\n//                 {/*            /!*{this.props.values.map(pet => (*!/*/}\n//                 {/*            /!*    <div key={pet.name}>*!/*/}\n//\n//                 {/*            /!*    </div>*!/*/}\n//                 {/*            /!*))}*!/*/}\n//                 {/*        </div>*/}\n//                 {/*    )}*/}\n//                 {/*</FieldArray>*/}\n//                 {/*<label htmlFor=\"\">end pets</label>*/}\n//\n//\n//                 {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\n//                     <div>\n//                         {console.log(this.handleChange.bind(this))}\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"1\" id=\"1\" {...inputProps}\n//                                 // onChange={this.handleChange}\n//                                    onChange={(event) => {\n//                                        console.log(\"========================\",event, this);\n//                                        const value = event.target.checked ? 'a' : null\n//                                        console.log(\"========================2\",value);\n//\n//                                        // this.props.setFieldValue('pets.0', value)\n//                                    }}\n//                                    // checked={ }\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"2\" id=\"1\" {...inputProps}\n//                                 onChange={this.handleChange}\n//\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                     </div>\n//\n//                     // Object.keys(this.props.values).map(function(name, index){\n//                     //     {console.log('test hier --------------------------------', index, name, inputProps)}\n//                     //     return (\n//                     //         <div className=\"form-check\" key={index}>\n//                     //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\n//                     //                     // onChange={this.handleChange}\n//                     //\n//                     //                    // checked={values.check}\n//                     //                    // onChange={() => setFieldValue(\"check\", !values.check)}\n//                     //             />\n//                     //             <label className=\"form-check-label\" htmlFor={name+index}>\n//                     //                 {name}\n//                     //             </label>\n//                     //         </div>\n//                     //     )\n//                     // })\n//                 }\n//\n\n/*\r\n                {/!*!/!*radio input*!/!*!/}\r\n                {/!*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*!/}\r\n                {/!*    Object.keys(this.props.values).map(function(name, index){*!/}\r\n                {/!*        return (*!/}\r\n                {/!*            <div className=\"form-check\" key={index}>*!/}\r\n                {/!*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*!/}\r\n                {/!*                <label className=\"form-check-label\" htmlFor={name+index}>*!/}\r\n                {/!*                    {name}*!/}\r\n                {/!*                </label>*!/}\r\n                {/!*            </div>*!/}\r\n                {/!*        )*!/}\r\n                {/!*    })*!/}\r\n                {/!*}*!/}*/\n//\n//                 {/*field error*/}\n//                 {this.props.error &&\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">\n//                         {this.props.error}\n//                     </div>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// export default props => <Field component={TextInputWrappedInternal} {...props} />;","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","classNames","InputFeedback","error","color","TextField","id","label","className","props","value","onChange","onBlur","touched","name","errors","Checkbox","field","form","CheckboxGroup","event","target","currentTarget","valueArray","checked","push","splice","indexOf","children","classes","Children","map","child","cloneElement","includes","handleChange","handleBlur","Component","RadioButton","RadioButtonGroup"],"mappings":"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KI,IAAA,OAAO,EAAEA,EAAE,KAAKI,KALpB;AAMI,IAAA,QAAQ,EAAEC,QANd;AAOI,IAAA,MAAM,EAAEC,MAPZ;AAQI,IAAA,SAAS,EAAEX,UAAU,CAAC,sBAAD;AARzB,KASQQ,KATR,EADJ,EAYI;AAAO,IAAA,OAAO,EAAEC,KAAhB;AAAuB,IAAA,SAAS,EAAC;AAAjC,KAAyDH,KAAzD,CAZJ,CADJ;AAgBH,CAvBM,C,CAyBP;;AACA,OAAO,IAAMgC,gBAAgB,GAAG,SAAnBA,gBAAmB,QAQ1B;AAAA,MAPJ7B,KAOI,SAPJA,KAOI;AAAA,MANJP,KAMI,SANJA,KAMI;AAAA,MALJU,OAKI,SALJA,OAKI;AAAA,MAJJP,EAII,SAJJA,EAII;AAAA,MAHJC,KAGI,SAHJA,KAGI;AAAA,MAFJC,SAEI,SAFJA,SAEI;AAAA,MADJoB,QACI,SADJA,QACI;AACF,MAAMC,OAAO,GAAG5B,UAAU,CACtB,aADsB,EAEtB;AACI,kBAAcS,KAAK,IAAK,CAACP,KAAD,IAAUU,OADtC;AACgD;AAC5C,gBAAY,CAAC,CAACV,KAAF,IAAWU;AAF3B,GAFsB,EAMtBL,SANsB,CAA1B;AASA,SACI;AAAK,IAAA,SAAS,EAAEP,UAAU,CAAC,YAAD;AAA1B,KACI,qBAAQM,KAAR,CADJ,EAEKqB,QAFL,EAGKf,OAAO,IAAI,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEV;AAAtB,IAHhB,CADJ;AAOH,CAzBM,C,CA2BP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\n// Input feedback\r\nconst InputFeedback = ({ error }) =>\r\n    error ? <div style={{color: \"red\"}} className={classNames(\"input-feedback\")}>{error}</div> : null\r\n\r\n\r\n// Checkbox input\r\nexport const TextField = ({\r\n      id,\r\n     label,\r\n     className,\r\n     ...props\r\n }) => {\r\n    return (\r\n        <div className=\"form-control\">\r\n            <label htmlFor={id} className=\"custom-control-label\">{label}</label>\r\n            <input\r\n                // name={name}\r\n                id={value}\r\n                type=\"radio\"\r\n                value={id}\r\n                checked={id === value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                {...props}\r\n             />\r\n            {touched[name] && <InputFeedback error={errors[name]} />}\r\n        </div>\r\n    );\r\n};\r\n\r\n// Checkbox input\r\nexport const Checkbox = ({\r\n  field: { name, value, onChange, onBlur },\r\n  form: { errors, touched },\r\n  id,\r\n  label,\r\n  className,\r\n  ...props\r\n}) => {\r\n    return (\r\n        <div className=\"custom-control custom-checkbox\">\r\n            <input\r\n                name={name}\r\n                id={id}\r\n                type=\"checkbox\"\r\n                value={value}\r\n                checked={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className=\"custom-control-input\"\r\n            />\r\n            <label htmlFor={id} className=\"custom-control-label\">{label}</label>\r\n            {touched[name] && <InputFeedback error={errors[name]} />}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Checkbox group\r\nexport class CheckboxGroup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const target = event.currentTarget;\r\n        let valueArray = [...this.props.value] || [];\r\n\r\n        if (target.checked) {\r\n            valueArray.push(target.id);\r\n        } else {\r\n            valueArray.splice(valueArray.indexOf(target.id), 1);\r\n        }\r\n\r\n        this.props.onChange(this.props.id, valueArray);\r\n    };\r\n\r\n    handleBlur = () => {\r\n        // take care of touched\r\n        this.props.onBlur(this.props.id, true);\r\n    };\r\n\r\n    render() {\r\n        const { value, error, touched, label, className, children } = this.props;\r\n\r\n        const classes = classNames(\r\n            \"input-field\",\r\n            \"form-group\",\r\n            {\r\n                \"is-success\": value || (!error && touched), // handle prefilled or user-filled\r\n                \"is-error\": !!error && touched\r\n            },\r\n            className\r\n        );\r\n\r\n        return (\r\n            <div className={classes}>\r\n                <label>{label}</label>\r\n                {React.Children.map(children, child => {\r\n                    return React.cloneElement(child, {\r\n                        field: {\r\n                            value: value.includes(child.props.id),\r\n                            onChange: this.handleChange,\r\n                            onBlur: this.handleBlur\r\n                        }\r\n                    });\r\n                })}\r\n                {touched && <InputFeedback error={error} />}\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Radio input\r\nexport const RadioButton = ({\r\n    field: { name, value, onChange, onBlur },\r\n    id,\r\n    label,\r\n    className,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <div className=\"custom-control custom-radio\">\r\n            <input\r\n                name={name}\r\n                id={value}\r\n                type=\"radio\"\r\n                value={id}\r\n                checked={id === value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className={classNames(\"custom-control-input\")}\r\n                {...props}\r\n            />\r\n            <label htmlFor={value} className=\"custom-control-label\">{label}</label>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Radio group\r\nexport const RadioButtonGroup = ({\r\n  value,\r\n  error,\r\n  touched,\r\n  id,\r\n  label,\r\n  className,\r\n  children\r\n}) => {\r\n    const classes = classNames(\r\n        \"input-field\",\r\n        {\r\n            \"is-success\": value || (!error && touched), // handle prefilled or user-filled\r\n            \"is-error\": !!error && touched\r\n        },\r\n        className\r\n    );\r\n\r\n    return (\r\n        <div className={classNames(\"form-group\")}>\r\n            <label>{label}</label>\r\n            {children}\r\n            {touched && <InputFeedback error={error} />}\r\n        </div>\r\n    );\r\n};\r\n\r\n// import React, { Component } from 'react';\r\n// import { Field, FieldArray } from 'formik';\r\n//\r\n// class TextInputWrappedInternal extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n//\r\n//     handleChange = event => {\r\n//         const {\r\n//             field: { name },\r\n//             form: { handleChange }\r\n//         } = this.props;\r\n//\r\n//         handleChange(event);\r\n//     };\r\n//\r\n//     render() {\r\n//         const {field, label} = this.props;\r\n//\r\n//         const inputProps = Object.assign({}, this.props);\r\n//\r\n//         delete inputProps.form;\r\n//         delete inputProps.label;\r\n//         delete inputProps.field;\r\n//         delete inputProps.error;\r\n//         delete inputProps.values;\r\n//\r\n//         const map = { a: 1, b: 2, c: 3 };\r\n//\r\n//         return (\r\n//             <div className=\"form-group\">\r\n//                 {/*label of input*/}\r\n//                 {this.props.label &&\r\n//                     <label htmlFor={this.props.id}>{label}</label>\r\n//                 }\r\n//\r\n//                 {/*text input*/}\r\n//                 {this.props.type == \"text\" &&\r\n//                     <input\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                     />\r\n//                 }\r\n//\r\n//                 {/*textarea input*/}\r\n//                 {this.props.type == \"textarea\" &&\r\n//                     <textarea\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                     />\r\n//                 }\r\n//\r\n//                 {/*select input*/}\r\n//                 {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\r\n//                     <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                     >\r\n//                         {Object.keys(this.props.values).map(function(name, index){\r\n//                             return (\r\n//                                 <option key={index} value={index}>\r\n//                                     {name}\r\n//                                 </option>\r\n//                             )\r\n//                         })}\r\n//                     </select>\r\n//                 }\r\n//\r\n//                 {/*{console.log('field', this)}*/}\r\n//                 {/*/!*checkbox input*!/*/}\r\n//                 {/*<label htmlFor=\"\">pets</label>*/}\r\n//                 {/*<FieldArray name=\"pets\">*/}\r\n//                 {/*    {(arrayHelper) => (*/}\r\n//                 {/*        <div>*/}\r\n//                 {/*            {console.log('-------------------------', this.props)}*/}\r\n//                 {/*            /!*{this.props.values.map(pet => (*!/*/}\r\n//                 {/*            /!*    <div key={pet.name}>*!/*/}\r\n//\r\n//                 {/*            /!*    </div>*!/*/}\r\n//                 {/*            /!*))}*!/*/}\r\n//                 {/*        </div>*/}\r\n//                 {/*    )}*/}\r\n//                 {/*</FieldArray>*/}\r\n//                 {/*<label htmlFor=\"\">end pets</label>*/}\r\n//\r\n//\r\n//                 {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\r\n//                     <div>\r\n//                         {console.log(this.handleChange.bind(this))}\r\n//                         <div className=\"form-check\">\r\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"1\" id=\"1\" {...inputProps}\r\n//                                 // onChange={this.handleChange}\r\n//                                    onChange={(event) => {\r\n//                                        console.log(\"========================\",event, this);\r\n//                                        const value = event.target.checked ? 'a' : null\r\n//                                        console.log(\"========================2\",value);\r\n//\r\n//                                        // this.props.setFieldValue('pets.0', value)\r\n//                                    }}\r\n//                                    // checked={ }\r\n//                                 // checked={this.props.values.check}\r\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\r\n//                             />\r\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\r\n//                                 test\r\n//                             </label>\r\n//                         </div>\r\n//                         <div className=\"form-check\">\r\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"2\" id=\"1\" {...inputProps}\r\n//                                 onChange={this.handleChange}\r\n//\r\n//                                 // checked={this.props.values.check}\r\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\r\n//                             />\r\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\r\n//                                 test\r\n//                             </label>\r\n//                         </div>\r\n//                     </div>\r\n//\r\n//                     // Object.keys(this.props.values).map(function(name, index){\r\n//                     //     {console.log('test hier --------------------------------', index, name, inputProps)}\r\n//                     //     return (\r\n//                     //         <div className=\"form-check\" key={index}>\r\n//                     //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\r\n//                     //                     // onChange={this.handleChange}\r\n//                     //\r\n//                     //                    // checked={values.check}\r\n//                     //                    // onChange={() => setFieldValue(\"check\", !values.check)}\r\n//                     //             />\r\n//                     //             <label className=\"form-check-label\" htmlFor={name+index}>\r\n//                     //                 {name}\r\n//                     //             </label>\r\n//                     //         </div>\r\n//                     //     )\r\n//                     // })\r\n//                 }\r\n//\r\n/*\r\n                {/!*!/!*radio input*!/!*!/}\r\n                {/!*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*!/}\r\n                {/!*    Object.keys(this.props.values).map(function(name, index){*!/}\r\n                {/!*        return (*!/}\r\n                {/!*            <div className=\"form-check\" key={index}>*!/}\r\n                {/!*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*!/}\r\n                {/!*                <label className=\"form-check-label\" htmlFor={name+index}>*!/}\r\n                {/!*                    {name}*!/}\r\n                {/!*                </label>*!/}\r\n                {/!*            </div>*!/}\r\n                {/!*        )*!/}\r\n                {/!*    })*!/}\r\n                {/!*}*!/}*/\r\n\r\n//\r\n//                 {/*field error*/}\r\n//                 {this.props.error &&\r\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">\r\n//                         {this.props.error}\r\n//                     </div>\r\n//                 }\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n//\r\n// export default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n"]},"metadata":{},"sourceType":"module"}