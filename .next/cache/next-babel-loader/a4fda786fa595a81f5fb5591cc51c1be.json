{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { Field } from \"formik\"; // Input feedback\n\nvar InputFeedback = function InputFeedback(_ref) {\n  var error = _ref.error;\n  return error ? __jsx(\"div\", {\n    style: {\n      color: \"red\"\n    },\n    className: classNames(\"input-feedback\")\n  }, error) : null;\n}; // Checkbox input\n\n\nexport var Checkbox = function Checkbox(_ref2) {\n  var _ref2$field = _ref2.field,\n      name = _ref2$field.name,\n      value = _ref2$field.value,\n      onChange = _ref2$field.onChange,\n      onBlur = _ref2$field.onBlur,\n      _ref2$form = _ref2.form,\n      errors = _ref2$form.errors,\n      touched = _ref2$form.touched,\n      id = _ref2.id,\n      label = _ref2.label,\n      className = _ref2.className,\n      props = _objectWithoutProperties(_ref2, [\"field\", \"form\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"custom-control custom-checkbox\"\n  }, __jsx(\"input\", {\n    name: name,\n    id: id,\n    type: \"checkbox\",\n    value: value,\n    checked: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"custom-control-input\"\n  }), __jsx(\"label\", {\n    htmlFor: id,\n    className: \"custom-control-label\"\n  }, label), touched[name] && __jsx(InputFeedback, {\n    error: errors[name]\n  }));\n}; // Checkbox group\n\nexport var CheckboxGroup = /*#__PURE__*/function (_React$Component) {\n  _inherits(CheckboxGroup, _React$Component);\n\n  function CheckboxGroup(props) {\n    var _this;\n\n    _classCallCheck(this, CheckboxGroup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckboxGroup).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      var target = event.currentTarget;\n      var valueArray = _toConsumableArray(_this.props.value) || [];\n\n      if (target.checked) {\n        valueArray.push(target.id);\n      } else {\n        valueArray.splice(valueArray.indexOf(target.id), 1);\n      }\n\n      _this.props.onChange(_this.props.id, valueArray);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleBlur\", function () {\n      // take care of touched\n      _this.props.onBlur(_this.props.id, true);\n    });\n\n    return _this;\n  }\n\n  _createClass(CheckboxGroup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          value = _this$props.value,\n          error = _this$props.error,\n          touched = _this$props.touched,\n          label = _this$props.label,\n          className = _this$props.className,\n          children = _this$props.children;\n      var classes = classNames(\"input-field\", \"form-group\", {\n        \"is-success\": value || !error && touched,\n        // handle prefilled or user-filled\n        \"is-error\": !!error && touched\n      }, className);\n      return __jsx(\"div\", {\n        className: classes\n      }, __jsx(\"label\", null, label), React.Children.map(children, function (child) {\n        return React.cloneElement(child, {\n          field: {\n            value: value.includes(child.props.id),\n            onChange: _this2.handleChange,\n            onBlur: _this2.handleBlur\n          }\n        });\n      }), touched && __jsx(InputFeedback, {\n        error: error\n      }));\n    }\n  }]);\n\n  return CheckboxGroup;\n}(React.Component); // Radio input\n\nexport var RadioButton = function RadioButton(_ref3) {\n  var _ref3$field = _ref3.field,\n      name = _ref3$field.name,\n      value = _ref3$field.value,\n      onChange = _ref3$field.onChange,\n      onBlur = _ref3$field.onBlur,\n      id = _ref3.id,\n      label = _ref3.label,\n      className = _ref3.className,\n      props = _objectWithoutProperties(_ref3, [\"field\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"custom-control custom-radio\"\n  }, __jsx(\"input\", _extends({\n    name: name,\n    id: id,\n    type: \"radio\",\n    value: value,\n    checked: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"custom-control-input\"\n  }, props)), __jsx(\"label\", {\n    htmlFor: id,\n    className: \"custom-control-label\"\n  }, label));\n}; // Radio group\n\nexport var RadioButtonGroup = function RadioButtonGroup(_ref4) {\n  var value = _ref4.value,\n      error = _ref4.error,\n      touched = _ref4.touched,\n      id = _ref4.id,\n      label = _ref4.label,\n      className = _ref4.className,\n      children = _ref4.children;\n  var classes = classNames(\"input-field\", {\n    \"is-success\": value || !error && touched,\n    // handle prefilled or user-filled\n    \"is-error\": !!error && touched\n  }, className);\n  return __jsx(\"div\", {\n    className: classNames(\"form-group\")\n  }, __jsx(\"label\", null, label), children, touched && __jsx(InputFeedback, {\n    error: error\n  }));\n};\nexport var SelectField = function SelectField(props) {\n  return __jsx(Field, _extends({\n    type: \"select\",\n    component: InputField\n  }, props));\n};\nexport var TextField = function TextField(props) {\n  return __jsx(Field, _extends({\n    type: \"text\",\n    component: InputField\n  }, props));\n};\nexport var TextareaField = function TextareaField(props) {\n  return __jsx(Field, _extends({\n    type: \"textarea\",\n    component: InputField\n  }, props));\n};\nexport var InputField = /*#__PURE__*/function (_React$Component2) {\n  _inherits(InputField, _React$Component2);\n\n  function InputField(props) {\n    var _this3;\n\n    _classCallCheck(this, InputField);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(InputField).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this3), \"handleChange\", function (event) {\n      var _this3$props = _this3.props,\n          name = _this3$props.field.name,\n          handleChange = _this3$props.form.handleChange;\n      handleChange(event);\n    });\n\n    return _this3;\n  }\n\n  _createClass(InputField, [{\n    key: \"renderSwitch\",\n    value: function renderSwitch(type) {\n      switch (type) {\n        case 'textarea':\n          return __jsx(TextareaInput, _extends({}, this.props, {\n            onChange: this.handleChange\n          }));\n\n        case 'text':\n          return __jsx(TextareaInput, _extends({}, this.props, {\n            onChange: this.handleChange\n          }));\n\n        default:\n          return inputComponent;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var label = this.props.label;\n      var inputProps = Object.assign({}, this.props);\n      delete inputProps.form;\n      delete inputProps.field;\n      delete inputProps.error;\n      delete inputProps.values;\n      console.log(this.props.type);\n      return __jsx(\"div\", {\n        className: \"form-group\"\n      }, __jsx(\"label\", null, label), this.renderSwitch(this.props.type), this.props.error && __jsx(InputFeedback, {\n        error: this.props.error\n      }));\n    }\n  }]);\n\n  return InputField;\n}(React.Component); // const get = (type) => {\n//     switch (type) {\n//         case '/':\n//         case '/report':\n//         case '/report/lesson_class':\n//             const ReportSideBar = require('containers/layouts/admin/sidebars/report-sidebar').default\n//             return <ReportSideBar />\n//         default:\n//             return null\n//     }\n// }\n\nexport var TextareaInput = function TextareaInput(props) {\n  console.log(\"props\", props);\n  return __jsx(\"textarea\", _extends({\n    className: \"form-control\".concat(props.error ? ' is-invalid' : ''),\n    onChange: props.onChange,\n    id: props.label\n  }, props));\n};\nexport var TextInput = function TextInput(props) {\n  console.log(\"props\", props);\n  return __jsx(\"input\", _extends({\n    className: \"form-control\".concat(props.error ? ' is-invalid' : ''),\n    onChange: props.onChange,\n    id: props.label\n  }, props));\n};\n{\n  /*<CheckboxGroup*/\n}\n{\n  /*    id=\"pets\"*/\n}\n{\n  /*    label=\"Which of these?\"*/\n}\n{\n  /*    value={values.pets}*/\n}\n{\n  /*    error={errors.pets}*/\n}\n{\n  /*    touched={touched.pets}*/\n}\n{\n  /*    onChange={setFieldValue}*/\n}\n{\n  /*    onBlur={setFieldTouched}*/\n}\n{\n  /*>*/\n}\n{\n  /*    {Object.keys(testArray).map(function(name, index) {*/\n}\n{\n  /*        return (*/\n}\n{\n  /*            <Field*/\n}\n{\n  /*                key={index}*/\n}\n{\n  /*                component={Checkbox}*/\n}\n{\n  /*                id={name}*/\n}\n{\n  /*                label={name}*/\n}\n{\n  /*            />*/\n}\n{\n  /*        )*/\n}\n{\n  /*    })}*/\n}\n{\n  /*</CheckboxGroup>*/\n}\n{\n  /*<RadioButtonGroup*/\n}\n{\n  /*id=\"radio\"*/\n}\n{\n  /*label=\"One of these please\"*/\n}\n{\n  /*value={values.radio}*/\n}\n{\n  /*error={errors.radio}*/\n}\n{\n  /*touched={touched.radio}*/\n}\n{\n  /*    >*/\n}\n{\n  /*    {Object.keys(testArray).map(function(name, index) {*/\n}\n{\n  /*            return (*/\n}\n{\n  /*                <Field*/\n}\n{\n  /*                    key={index}*/\n}\n{\n  /*                    component={RadioButton}*/\n}\n{\n  /*                    name=\"radio\"*/\n}\n{\n  /*                    id={name}*/\n}\n{\n  /*                    label={name}*/\n}\n{\n  /*                />*/\n}\n{\n  /*            )*/\n}\n{\n  /*        })}*/\n}\n{}\n/*</RadioButtonGroup>*/\n// class TextInputWrappedInternal extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//\n//     handleChange = event => {\n//         const {\n//             field: { name },\n//             form: { handleChange }\n//         } = this.props;\n//\n//         handleChange(event);\n//     };\n//\n//     render() {\n//         const {field, label} = this.props;\n//\n//         const inputProps = Object.assign({}, this.props);\n//\n//         delete inputProps.form;\n//         delete inputProps.label;\n//         delete inputProps.field;\n//         delete inputProps.error;\n//         delete inputProps.values;\n//\n//         const map = { a: 1, b: 2, c: 3 };\n//\n//         return (\n//             <div className=\"form-group\">\n//                 {/*label of input*/}\n//                 {this.props.label &&\n//                     <label htmlFor={this.props.id}>{label}</label>\n//                 }\n//\n//                 {/*text input*/}\n//                 {this.props.type == \"text\" &&\n//                     <input\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*textarea input*/}\n//                 {this.props.type == \"textarea\" &&\n//                     <textarea\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*select input*/}\n//                 {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\n//                     <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                     >\n//                         {Object.keys(this.props.values).map(function(name, index){\n//                             return (\n//                                 <option key={index} value={index}>\n//                                     {name}\n//                                 </option>\n//                             )\n//                         })}\n//                     </select>\n//                 }\n//\n//                 {/*{console.log('field', this)}*/}\n//                 {/*/!*checkbox input*!/*/}\n//                 {/*<label htmlFor=\"\">pets</label>*/}\n//                 {/*<FieldArray name=\"pets\">*/}\n//                 {/*    {(arrayHelper) => (*/}\n//                 {/*        <div>*/}\n//                 {/*            {console.log('-------------------------', this.props)}*/}\n//                 {/*            /!*{this.props.values.map(pet => (*!/*/}\n//                 {/*            /!*    <div key={pet.name}>*!/*/}\n//\n//                 {/*            /!*    </div>*!/*/}\n//                 {/*            /!*))}*!/*/}\n//                 {/*        </div>*/}\n//                 {/*    )}*/}\n//                 {/*</FieldArray>*/}\n//                 {/*<label htmlFor=\"\">end pets</label>*/}\n//\n//\n//                 {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\n//                     <div>\n//                         {console.log(this.handleChange.bind(this))}\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"1\" id=\"1\" {...inputProps}\n//                                 // onChange={this.handleChange}\n//                                    onChange={(event) => {\n//                                        console.log(\"========================\",event, this);\n//                                        const value = event.target.checked ? 'a' : null\n//                                        console.log(\"========================2\",value);\n//\n//                                        // this.props.setFieldValue('pets.0', value)\n//                                    }}\n//                                    // checked={ }\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"2\" id=\"1\" {...inputProps}\n//                                 onChange={this.handleChange}\n//\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                     </div>\n// Object.keys(this.props.values).map(function(name, index){\n//     {console.log('test hier --------------------------------', index, name, inputProps)}\n//     return (\n//         <div className=\"form-check\" key={index}>\n//             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\n//                     // onChange={this.handleChange}\n//\n//                    // checked={values.check}\n//                    // onChange={() => setFieldValue(\"check\", !values.check)}\n//             />\n//             <label className=\"form-check-label\" htmlFor={name+index}>\n//                 {name}\n//             </label>\n//         </div>\n//     )\n// })\n// }\n\n/*\r\n                {/!*!/!*radio input*!/!*!/}\r\n                {/!*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*!/}\r\n                {/!*    Object.keys(this.props.values).map(function(name, index){*!/}\r\n                {/!*        return (*!/}\r\n                {/!*            <div className=\"form-check\" key={index}>*!/}\r\n                {/!*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*!/}\r\n                {/!*                <label className=\"form-check-label\" htmlFor={name+index}>*!/}\r\n                {/!*                    {name}*!/}\r\n                {/!*                </label>*!/}\r\n                {/!*            </div>*!/}\r\n                {/!*        )*!/}\r\n                {/!*    })*!/}\r\n                {/!*}*!/}*/\n//                 {this.props.error &&\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">\n//                         {this.props.error}\n//                     </div>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// export default props => <Field component={TextInputWrappedInternal} {...props} />;","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","classNames","Field","InputFeedback","error","color","Checkbox","field","name","value","onChange","onBlur","form","errors","touched","id","label","className","props","CheckboxGroup","event","target","currentTarget","valueArray","checked","push","splice","indexOf","children","classes","Children","map","child","cloneElement","includes","handleChange","handleBlur","Component","RadioButton","RadioButtonGroup","SelectField","InputField","TextField","TextareaField","type","inputComponent","inputProps","Object","assign","values","console","log","renderSwitch","TextareaInput","TextInput"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAAQC,KAAR,QAAoB,QAApB,C,CAEA;;AACA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,KAAH,QAAGA,KAAH;AAAA,SAAeA,KAAK,GAAG;AAAK,IAAA,KAAK,EAAE;AAACC,MAAAA,KAAK,EAAE;AAAR,KAAZ;AAA4B,IAAA,SAAS,EAAEJ,UAAU,CAAC,gBAAD;AAAjD,KAAsEG,KAAtE,CAAH,GAAwF,IAA5G;AAAA,CAAtB,C,CAEA;;;AACA,OAAO,IAAME,QAAQ,GAAG,SAAXA,QAAW,QAOlB;AAAA,0BANJC,KAMI;AAAA,MANKC,IAML,eANKA,IAML;AAAA,MANWC,KAMX,eANWA,KAMX;AAAA,MANkBC,QAMlB,eANkBA,QAMlB;AAAA,MAN4BC,MAM5B,eAN4BA,MAM5B;AAAA,yBALJC,IAKI;AAAA,MALIC,MAKJ,cALIA,MAKJ;AAAA,MALYC,OAKZ,cALYA,OAKZ;AAAA,MAJJC,EAII,SAJJA,EAII;AAAA,MAHJC,KAGI,SAHJA,KAGI;AAAA,MAFJC,SAEI,SAFJA,SAEI;AAAA,MADDC,KACC;;AACF,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AACI,IAAA,IAAI,EAAEV,IADV;AAEI,IAAA,EAAE,EAAEO,EAFR;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,KAAK,EAAEN,KAJX;AAKI,IAAA,OAAO,EAAEA,KALb;AAMI,IAAA,QAAQ,EAAEC,QANd;AAOI,IAAA,MAAM,EAAEC,MAPZ;AAQI,IAAA,SAAS,EAAC;AARd,IADJ,EAWI;AAAO,IAAA,OAAO,EAAEI,EAAhB;AAAoB,IAAA,SAAS,EAAC;AAA9B,KAAsDC,KAAtD,CAXJ,EAYKF,OAAO,CAACN,IAAD,CAAP,IAAiB,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEK,MAAM,CAACL,IAAD;AAA5B,IAZtB,CADJ;AAgBH,CAxBM,C,CA2BP;;AACA,WAAaW,aAAb;AAAA;;AACI,yBAAYD,KAAZ,EAAmB;AAAA;;AAAA;;AACf,uFAAMA,KAAN;;AADe,mEAIJ,UAAAE,KAAK,EAAI;AACpB,UAAMC,MAAM,GAAGD,KAAK,CAACE,aAArB;AACA,UAAIC,UAAU,GAAG,mBAAI,MAAKL,KAAL,CAAWT,KAAf,KAAyB,EAA1C;;AAEA,UAAIY,MAAM,CAACG,OAAX,EAAoB;AAChBD,QAAAA,UAAU,CAACE,IAAX,CAAgBJ,MAAM,CAACN,EAAvB;AACH,OAFD,MAEO;AACHQ,QAAAA,UAAU,CAACG,MAAX,CAAkBH,UAAU,CAACI,OAAX,CAAmBN,MAAM,CAACN,EAA1B,CAAlB,EAAiD,CAAjD;AACH;;AAED,YAAKG,KAAL,CAAWR,QAAX,CAAoB,MAAKQ,KAAL,CAAWH,EAA/B,EAAmCQ,UAAnC;AACH,KAfkB;;AAAA,iEAiBN,YAAM;AACf;AACA,YAAKL,KAAL,CAAWP,MAAX,CAAkB,MAAKO,KAAL,CAAWH,EAA7B,EAAiC,IAAjC;AACH,KApBkB;;AAAA;AAElB;;AAHL;AAAA;AAAA,6BAuBa;AAAA;;AAAA,wBACyD,KAAKG,KAD9D;AAAA,UACGT,KADH,eACGA,KADH;AAAA,UACUL,KADV,eACUA,KADV;AAAA,UACiBU,OADjB,eACiBA,OADjB;AAAA,UAC0BE,KAD1B,eAC0BA,KAD1B;AAAA,UACiCC,SADjC,eACiCA,SADjC;AAAA,UAC4CW,QAD5C,eAC4CA,QAD5C;AAGL,UAAMC,OAAO,GAAG5B,UAAU,CACtB,aADsB,EAEtB,YAFsB,EAGtB;AACI,sBAAcQ,KAAK,IAAK,CAACL,KAAD,IAAUU,OADtC;AACgD;AAC5C,oBAAY,CAAC,CAACV,KAAF,IAAWU;AAF3B,OAHsB,EAOtBG,SAPsB,CAA1B;AAUA,aACI;AAAK,QAAA,SAAS,EAAEY;AAAhB,SACI,qBAAQb,KAAR,CADJ,EAEKhB,KAAK,CAAC8B,QAAN,CAAeC,GAAf,CAAmBH,QAAnB,EAA6B,UAAAI,KAAK,EAAI;AACnC,eAAOhC,KAAK,CAACiC,YAAN,CAAmBD,KAAnB,EAA0B;AAC7BzB,UAAAA,KAAK,EAAE;AACHE,YAAAA,KAAK,EAAEA,KAAK,CAACyB,QAAN,CAAeF,KAAK,CAACd,KAAN,CAAYH,EAA3B,CADJ;AAEHL,YAAAA,QAAQ,EAAE,MAAI,CAACyB,YAFZ;AAGHxB,YAAAA,MAAM,EAAE,MAAI,CAACyB;AAHV;AADsB,SAA1B,CAAP;AAOH,OARA,CAFL,EAWKtB,OAAO,IAAI,MAAC,aAAD;AAAe,QAAA,KAAK,EAAEV;AAAtB,QAXhB,CADJ;AAeH;AAnDL;;AAAA;AAAA,EAAmCJ,KAAK,CAACqC,SAAzC,E,CAsDA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,QAMrB;AAAA,0BALF/B,KAKE;AAAA,MALOC,IAKP,eALOA,IAKP;AAAA,MALaC,KAKb,eALaA,KAKb;AAAA,MALoBC,QAKpB,eALoBA,QAKpB;AAAA,MAL8BC,MAK9B,eAL8BA,MAK9B;AAAA,MAJFI,EAIE,SAJFA,EAIE;AAAA,MAHFC,KAGE,SAHFA,KAGE;AAAA,MAFFC,SAEE,SAFFA,SAEE;AAAA,MADCC,KACD;;AACF,SACI;AAAK,IAAA,SAAS,EAAC;AAAf,KACI;AACI,IAAA,IAAI,EAAEV,IADV;AAEI,IAAA,EAAE,EAAEO,EAFR;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,KAAK,EAAEN,KAJX;AAKI,IAAA,OAAO,EAAEA,KALb;AAMI,IAAA,QAAQ,EAAEC,QANd;AAOI,IAAA,MAAM,EAAEC,MAPZ;AAQI,IAAA,SAAS,EAAC;AARd,KASQO,KATR,EADJ,EAYI;AAAO,IAAA,OAAO,EAAEH,EAAhB;AAAoB,IAAA,SAAS,EAAC;AAA9B,KACKC,KADL,CAZJ,CADJ;AAkBH,CAzBM,C,CA2BP;;AACA,OAAO,IAAMuB,gBAAgB,GAAG,SAAnBA,gBAAmB,QAQ1B;AAAA,MAPJ9B,KAOI,SAPJA,KAOI;AAAA,MANJL,KAMI,SANJA,KAMI;AAAA,MALJU,OAKI,SALJA,OAKI;AAAA,MAJJC,EAII,SAJJA,EAII;AAAA,MAHJC,KAGI,SAHJA,KAGI;AAAA,MAFJC,SAEI,SAFJA,SAEI;AAAA,MADJW,QACI,SADJA,QACI;AACF,MAAMC,OAAO,GAAG5B,UAAU,CACtB,aADsB,EAEtB;AACI,kBAAcQ,KAAK,IAAK,CAACL,KAAD,IAAUU,OADtC;AACgD;AAC5C,gBAAY,CAAC,CAACV,KAAF,IAAWU;AAF3B,GAFsB,EAMtBG,SANsB,CAA1B;AASA,SACI;AAAK,IAAA,SAAS,EAAEhB,UAAU,CAAC,YAAD;AAA1B,KACI,qBAAQe,KAAR,CADJ,EAEKY,QAFL,EAGKd,OAAO,IAAI,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEV;AAAtB,IAHhB,CADJ;AAOH,CAzBM;AA2BP,OAAO,IAAMoC,WAAW,GAAG,SAAdA,WAAc,CAACtB,KAAD,EAAW;AAClC,SACI,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,SAAS,EAAEuB;AAAhC,KAAgDvB,KAAhD,EADJ;AAGH,CAJM;AAMP,OAAO,IAAMwB,SAAS,GAAG,SAAZA,SAAY,CAACxB,KAAD,EAAW;AAChC,SACI,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,SAAS,EAAEuB;AAA9B,KAA8CvB,KAA9C,EADJ;AAGH,CAJM;AAMP,OAAO,IAAMyB,aAAa,GAAG,SAAhBA,aAAgB,CAACzB,KAAD,EAAW;AACpC,SACI,MAAC,KAAD;AAAO,IAAA,IAAI,EAAC,UAAZ;AAAuB,IAAA,SAAS,EAAEuB;AAAlC,KAAkDvB,KAAlD,EADJ;AAGH,CAJM;AAMP,WAAauB,UAAb;AAAA;;AACI,sBAAYvB,KAAZ,EAAmB;AAAA;;AAAA;;AACf,qFAAMA,KAAN;;AADe,oEAIJ,UAAAE,KAAK,EAAI;AAAA,yBAIhB,OAAKF,KAJW;AAAA,UAEPV,IAFO,gBAEhBD,KAFgB,CAEPC,IAFO;AAAA,UAGR2B,YAHQ,gBAGhBvB,IAHgB,CAGRuB,YAHQ;AAMpBA,MAAAA,YAAY,CAACf,KAAD,CAAZ;AACH,KAXkB;;AAAA;AAElB;;AAHL;AAAA;AAAA,iCAaiBwB,IAbjB,EAauB;AACf,cAAQA,IAAR;AACI,aAAK,UAAL;AACI,iBAAO,MAAC,aAAD,eAAmB,KAAK1B,KAAxB;AAA+B,YAAA,QAAQ,EAAE,KAAKiB;AAA9C,aAAP;;AACJ,aAAK,MAAL;AACI,iBAAO,MAAC,aAAD,eAAmB,KAAKjB,KAAxB;AAA+B,YAAA,QAAQ,EAAE,KAAKiB;AAA9C,aAAP;;AACJ;AACI,iBAAOU,cAAP;AANR;AAQH;AAtBL;AAAA;AAAA,6BAwBa;AAAA,UACE7B,KADF,GACW,KAAKE,KADhB,CACEF,KADF;AAGL,UAAM8B,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK9B,KAAvB,CAAnB;AACA,aAAO4B,UAAU,CAAClC,IAAlB;AACA,aAAOkC,UAAU,CAACvC,KAAlB;AACA,aAAOuC,UAAU,CAAC1C,KAAlB;AACA,aAAO0C,UAAU,CAACG,MAAlB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjC,KAAL,CAAW0B,IAAvB;AAEA,aACI;AAAK,QAAA,SAAS,EAAC;AAAf,SACI,qBAAQ5B,KAAR,CADJ,EAEK,KAAKoC,YAAL,CAAkB,KAAKlC,KAAL,CAAW0B,IAA7B,CAFL,EAMK,KAAK1B,KAAL,CAAWd,KAAX,IAAoB,MAAC,aAAD;AAAe,QAAA,KAAK,EAAE,KAAKc,KAAL,CAAWd;AAAjC,QANzB,CADJ;AAUH;AA7CL;;AAAA;AAAA,EAAgCJ,KAAK,CAACqC,SAAtC,E,CAgDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAMgB,aAAa,GAAG,SAAhBA,aAAgB,CAACnC,KAAD,EAAW;AACpCgC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBjC,KAArB;AACA,SACI;AACI,IAAA,SAAS,wBAAiBA,KAAK,CAACd,KAAN,GAAc,aAAd,GAA8B,EAA/C,CADb;AAEI,IAAA,QAAQ,EAAEc,KAAK,CAACR,QAFpB;AAGI,IAAA,EAAE,EAAEQ,KAAK,CAACF;AAHd,KAIQE,KAJR,EADJ;AAQH,CAVM;AAYP,OAAO,IAAMoC,SAAS,GAAG,SAAZA,SAAY,CAACpC,KAAD,EAAW;AAChCgC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBjC,KAArB;AACA,SACI;AACI,IAAA,SAAS,wBAAiBA,KAAK,CAACd,KAAN,GAAc,aAAd,GAA8B,EAA/C,CADb;AAEI,IAAA,QAAQ,EAAEc,KAAK,CAACR,QAFpB;AAGI,IAAA,EAAE,EAAEQ,KAAK,CAACF;AAHd,KAIQE,KAJR,EADJ;AAQH,CAVM;AAaP;AAAC;AAAmB;AACpB;AAAC;AAAkB;AACnB;AAAC;AAAgC;AACjC;AAAC;AAA4B;AAC7B;AAAC;AAA4B;AAC7B;AAAC;AAA+B;AAChC;AAAC;AAAiC;AAClC;AAAC;AAAiC;AAClC;AAAC;AAAM;AACP;AAAC;AAA4D;AAC7D;AAAC;AAAqB;AACtB;AAAC;AAAuB;AACxB;AAAC;AAAgC;AACjC;AAAC;AAAyC;AAC1C;AAAC;AAA8B;AAC/B;AAAC;AAAiC;AAClC;AAAC;AAAmB;AACpB;AAAC;AAAc;AACf;AAAC;AAAY;AACb;AAAC;AAAqB;AAEtB;AAAC;AAAsB;AACvB;AAAC;AAAe;AAChB;AAAC;AAAgC;AACjC;AAAC;AAAyB;AAC1B;AAAC;AAAyB;AAC1B;AAAC;AAA4B;AAC7B;AAAC;AAAU;AACX;AAAC;AAA4D;AAC7D;AAAC;AAAyB;AAC1B;AAAC;AAA2B;AAC5B;AAAC;AAAoC;AACrC;AAAC;AAAgD;AACjD;AAAC;AAAqC;AACtC;AAAC;AAAkC;AACnC;AAAC;AAAqC;AACtC;AAAC;AAAuB;AACxB;AAAC;AAAkB;AACnB;AAAC;AAAgB;AACjB,CAAyB;AAAxoB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACJ;;AAEhB;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {Field} from \"formik\"\r\n\r\n// Input feedback\r\nconst InputFeedback = ({ error }) => error ? <div style={{color: \"red\"}} className={classNames(\"input-feedback\")}>{error}</div> : null\r\n\r\n// Checkbox input\r\nexport const Checkbox = ({\r\n  field: { name, value, onChange, onBlur },\r\n  form: { errors, touched },\r\n  id,\r\n  label,\r\n  className,\r\n  ...props\r\n}) => {\r\n    return (\r\n        <div className=\"custom-control custom-checkbox\">\r\n            <input\r\n                name={name}\r\n                id={id}\r\n                type=\"checkbox\"\r\n                value={value}\r\n                checked={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className=\"custom-control-input\"\r\n            />\r\n            <label htmlFor={id} className=\"custom-control-label\">{label}</label>\r\n            {touched[name] && <InputFeedback error={errors[name]} />}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n// Checkbox group\r\nexport class CheckboxGroup extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const target = event.currentTarget;\r\n        let valueArray = [...this.props.value] || [];\r\n\r\n        if (target.checked) {\r\n            valueArray.push(target.id);\r\n        } else {\r\n            valueArray.splice(valueArray.indexOf(target.id), 1);\r\n        }\r\n\r\n        this.props.onChange(this.props.id, valueArray);\r\n    };\r\n\r\n    handleBlur = () => {\r\n        // take care of touched\r\n        this.props.onBlur(this.props.id, true);\r\n    };\r\n\r\n    render() {\r\n        const { value, error, touched, label, className, children } = this.props;\r\n\r\n        const classes = classNames(\r\n            \"input-field\",\r\n            \"form-group\",\r\n            {\r\n                \"is-success\": value || (!error && touched), // handle prefilled or user-filled\r\n                \"is-error\": !!error && touched\r\n            },\r\n            className\r\n        );\r\n\r\n        return (\r\n            <div className={classes}>\r\n                <label>{label}</label>\r\n                {React.Children.map(children, child => {\r\n                    return React.cloneElement(child, {\r\n                        field: {\r\n                            value: value.includes(child.props.id),\r\n                            onChange: this.handleChange,\r\n                            onBlur: this.handleBlur\r\n                        }\r\n                    });\r\n                })}\r\n                {touched && <InputFeedback error={error} />}\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\n// Radio input\r\nexport const RadioButton = ({\r\n    field: { name, value, onChange, onBlur },\r\n    id,\r\n    label,\r\n    className,\r\n    ...props\r\n}) => {\r\n    return (\r\n        <div className=\"custom-control custom-radio\">\r\n            <input\r\n                name={name}\r\n                id={id}\r\n                type=\"radio\"\r\n                value={value}\r\n                checked={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className=\"custom-control-input\"\r\n                {...props}\r\n            />\r\n            <label htmlFor={id} className=\"custom-control-label\">\r\n                {label}\r\n            </label>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Radio group\r\nexport const RadioButtonGroup = ({\r\n  value,\r\n  error,\r\n  touched,\r\n  id,\r\n  label,\r\n  className,\r\n  children\r\n}) => {\r\n    const classes = classNames(\r\n        \"input-field\",\r\n        {\r\n            \"is-success\": value || (!error && touched), // handle prefilled or user-filled\r\n            \"is-error\": !!error && touched\r\n        },\r\n        className\r\n    );\r\n\r\n    return (\r\n        <div className={classNames(\"form-group\")}>\r\n            <label>{label}</label>\r\n            {children}\r\n            {touched && <InputFeedback error={error} />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const SelectField = (props) => {\r\n    return (\r\n        <Field type=\"select\" component={InputField} {...props} />\r\n    )\r\n}\r\n\r\nexport const TextField = (props) => {\r\n    return (\r\n        <Field type=\"text\" component={InputField} {...props} />\r\n    )\r\n}\r\n\r\nexport const TextareaField = (props) => {\r\n    return (\r\n        <Field type=\"textarea\" component={InputField} {...props} />\r\n    )\r\n}\r\n\r\nexport class InputField extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const {\r\n            field: { name },\r\n            form: { handleChange }\r\n        } = this.props;\r\n\r\n        handleChange(event);\r\n    };\r\n    renderSwitch(type) {\r\n        switch (type) {\r\n            case 'textarea':\r\n                return <TextareaInput {...this.props} onChange={this.handleChange} />\r\n            case 'text':\r\n                return <TextareaInput {...this.props} onChange={this.handleChange} />\r\n            default:\r\n                return inputComponent\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {label} = this.props;\r\n\r\n        const inputProps = Object.assign({}, this.props);\r\n        delete inputProps.form;\r\n        delete inputProps.field;\r\n        delete inputProps.error;\r\n        delete inputProps.values;\r\n\r\n        console.log(this.props.type)\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                <label>{label}</label>\r\n                {this.renderSwitch(this.props.type)}\r\n                {/*<TextareaInput {...this.props} onChange={this.handleChange} />*/}\r\n                {/*<inputComponent />*/}\r\n\r\n                {this.props.error && <InputFeedback error={this.props.error} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// const get = (type) => {\r\n//     switch (type) {\r\n//         case '/':\r\n//         case '/report':\r\n//         case '/report/lesson_class':\r\n//             const ReportSideBar = require('containers/layouts/admin/sidebars/report-sidebar').default\r\n//             return <ReportSideBar />\r\n//         default:\r\n//             return null\r\n//     }\r\n// }\r\n\r\nexport const TextareaInput = (props) => {\r\n    console.log(\"props\", props)\r\n    return (\r\n        <textarea\r\n            className={`form-control${props.error ? ' is-invalid' : ''}`}\r\n            onChange={props.onChange}\r\n            id={props.label}\r\n            {...props}\r\n        ></textarea>\r\n    )\r\n}\r\n\r\nexport const TextInput = (props) => {\r\n    console.log(\"props\", props)\r\n    return (\r\n        <input\r\n            className={`form-control${props.error ? ' is-invalid' : ''}`}\r\n            onChange={props.onChange}\r\n            id={props.label}\r\n            {...props}\r\n        />\r\n    )\r\n}\r\n\r\n\r\n{/*<CheckboxGroup*/}\r\n{/*    id=\"pets\"*/}\r\n{/*    label=\"Which of these?\"*/}\r\n{/*    value={values.pets}*/}\r\n{/*    error={errors.pets}*/}\r\n{/*    touched={touched.pets}*/}\r\n{/*    onChange={setFieldValue}*/}\r\n{/*    onBlur={setFieldTouched}*/}\r\n{/*>*/}\r\n{/*    {Object.keys(testArray).map(function(name, index) {*/}\r\n{/*        return (*/}\r\n{/*            <Field*/}\r\n{/*                key={index}*/}\r\n{/*                component={Checkbox}*/}\r\n{/*                id={name}*/}\r\n{/*                label={name}*/}\r\n{/*            />*/}\r\n{/*        )*/}\r\n{/*    })}*/}\r\n{/*</CheckboxGroup>*/}\r\n\r\n{/*<RadioButtonGroup*/}\r\n{/*id=\"radio\"*/}\r\n{/*label=\"One of these please\"*/}\r\n{/*value={values.radio}*/}\r\n{/*error={errors.radio}*/}\r\n{/*touched={touched.radio}*/}\r\n{/*    >*/}\r\n{/*    {Object.keys(testArray).map(function(name, index) {*/}\r\n{/*            return (*/}\r\n{/*                <Field*/}\r\n{/*                    key={index}*/}\r\n{/*                    component={RadioButton}*/}\r\n{/*                    name=\"radio\"*/}\r\n{/*                    id={name}*/}\r\n{/*                    label={name}*/}\r\n{/*                />*/}\r\n{/*            )*/}\r\n{/*        })}*/}\r\n{/*</RadioButtonGroup>*/}\r\n\r\n\r\n// class TextInputWrappedInternal extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n//\r\n//     handleChange = event => {\r\n//         const {\r\n//             field: { name },\r\n//             form: { handleChange }\r\n//         } = this.props;\r\n//\r\n//         handleChange(event);\r\n//     };\r\n//\r\n//     render() {\r\n//         const {field, label} = this.props;\r\n//\r\n//         const inputProps = Object.assign({}, this.props);\r\n//\r\n//         delete inputProps.form;\r\n//         delete inputProps.label;\r\n//         delete inputProps.field;\r\n//         delete inputProps.error;\r\n//         delete inputProps.values;\r\n//\r\n//         const map = { a: 1, b: 2, c: 3 };\r\n//\r\n//         return (\r\n//             <div className=\"form-group\">\r\n//                 {/*label of input*/}\r\n//                 {this.props.label &&\r\n//                     <label htmlFor={this.props.id}>{label}</label>\r\n//                 }\r\n//\r\n//                 {/*text input*/}\r\n//                 {this.props.type == \"text\" &&\r\n//                     <input\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                     />\r\n//                 }\r\n//\r\n//                 {/*textarea input*/}\r\n//                 {this.props.type == \"textarea\" &&\r\n//                     <textarea\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                     />\r\n//                 }\r\n//\r\n//                 {/*select input*/}\r\n//                 {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\r\n//                     <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                     >\r\n//                         {Object.keys(this.props.values).map(function(name, index){\r\n//                             return (\r\n//                                 <option key={index} value={index}>\r\n//                                     {name}\r\n//                                 </option>\r\n//                             )\r\n//                         })}\r\n//                     </select>\r\n//                 }\r\n//\r\n//                 {/*{console.log('field', this)}*/}\r\n//                 {/*/!*checkbox input*!/*/}\r\n//                 {/*<label htmlFor=\"\">pets</label>*/}\r\n//                 {/*<FieldArray name=\"pets\">*/}\r\n//                 {/*    {(arrayHelper) => (*/}\r\n//                 {/*        <div>*/}\r\n//                 {/*            {console.log('-------------------------', this.props)}*/}\r\n//                 {/*            /!*{this.props.values.map(pet => (*!/*/}\r\n//                 {/*            /!*    <div key={pet.name}>*!/*/}\r\n//\r\n//                 {/*            /!*    </div>*!/*/}\r\n//                 {/*            /!*))}*!/*/}\r\n//                 {/*        </div>*/}\r\n//                 {/*    )}*/}\r\n//                 {/*</FieldArray>*/}\r\n//                 {/*<label htmlFor=\"\">end pets</label>*/}\r\n//\r\n//\r\n//                 {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\r\n//                     <div>\r\n//                         {console.log(this.handleChange.bind(this))}\r\n//                         <div className=\"form-check\">\r\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"1\" id=\"1\" {...inputProps}\r\n//                                 // onChange={this.handleChange}\r\n//                                    onChange={(event) => {\r\n//                                        console.log(\"========================\",event, this);\r\n//                                        const value = event.target.checked ? 'a' : null\r\n//                                        console.log(\"========================2\",value);\r\n//\r\n//                                        // this.props.setFieldValue('pets.0', value)\r\n//                                    }}\r\n//                                    // checked={ }\r\n//                                 // checked={this.props.values.check}\r\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\r\n//                             />\r\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\r\n//                                 test\r\n//                             </label>\r\n//                         </div>\r\n//                         <div className=\"form-check\">\r\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"2\" id=\"1\" {...inputProps}\r\n//                                 onChange={this.handleChange}\r\n//\r\n//                                 // checked={this.props.values.check}\r\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\r\n//                             />\r\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\r\n//                                 test\r\n//                             </label>\r\n//                         </div>\r\n//                     </div>\r\n\r\n                    // Object.keys(this.props.values).map(function(name, index){\r\n                    //     {console.log('test hier --------------------------------', index, name, inputProps)}\r\n                    //     return (\r\n                    //         <div className=\"form-check\" key={index}>\r\n                    //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\r\n                    //                     // onChange={this.handleChange}\r\n                    //\r\n                    //                    // checked={values.check}\r\n                    //                    // onChange={() => setFieldValue(\"check\", !values.check)}\r\n                    //             />\r\n                    //             <label className=\"form-check-label\" htmlFor={name+index}>\r\n                    //                 {name}\r\n                    //             </label>\r\n                    //         </div>\r\n                    //     )\r\n                    // })\r\n                // }\r\n\r\n/*\r\n                {/!*!/!*radio input*!/!*!/}\r\n                {/!*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*!/}\r\n                {/!*    Object.keys(this.props.values).map(function(name, index){*!/}\r\n                {/!*        return (*!/}\r\n                {/!*            <div className=\"form-check\" key={index}>*!/}\r\n                {/!*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*!/}\r\n                {/!*                <label className=\"form-check-label\" htmlFor={name+index}>*!/}\r\n                {/!*                    {name}*!/}\r\n                {/!*                </label>*!/}\r\n                {/!*            </div>*!/}\r\n                {/!*        )*!/}\r\n                {/!*    })*!/}\r\n                {/!*}*!/}*/\r\n\r\n\r\n//                 {this.props.error &&\r\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">\r\n//                         {this.props.error}\r\n//                     </div>\r\n//                 }\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n//\r\n// export default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n"]},"metadata":{},"sourceType":"module"}