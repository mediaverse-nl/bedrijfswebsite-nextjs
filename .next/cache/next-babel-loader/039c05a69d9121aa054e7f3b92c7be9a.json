{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useRouter } from 'next/router';\nimport PropTypes from 'prop-types';\nimport routes, { Link } from '../routes';\nimport React, { Children } from 'react';\n\nconst ActiveLink = (_ref) => {\n  let {\n    children,\n    activeClassName\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"activeClassName\"]);\n\n  const router = useRouter();\n  const child = Children.only(children);\n  const childClassName = child.props.className || '';\n  const isActiveRoute = props.route === undefined ? false : routes.findAndGetUrls(props.route, props.params).urls.as === router.pathname;\n  console.log('props', props);\n  console.log('test', isActiveRoute);\n  console.log('props.route', props.route);\n  console.log('routes.findAndGetUrls', routes.findAndGetUrls(props.route, props.params).urls.as);\n  console.log('routes.pathname', router);\n  const className = router; // pathname === props.href\n  //     ? `${childClassName} ${activeClassName}`.trim()\n  //     : childClassName\n\n  return __jsx(Link, props, React.cloneElement(child, {\n    className: className || null\n  }));\n}; // ActiveLink.propTypes = {\n//     activeClassName: PropTypes.string.isRequired\n// }\n\n\nexport default ActiveLink;","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/ActiveLink.js"],"names":["useRouter","PropTypes","routes","Link","React","Children","ActiveLink","children","activeClassName","props","router","child","only","childClassName","className","isActiveRoute","route","undefined","findAndGetUrls","params","urls","as","pathname","console","log","cloneElement"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,IAAgBC,IAAhB,QAA2B,WAA3B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,UAAU,GAAG,UAA6C;AAAA,MAA5C;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA4C;AAAA,MAAZC,KAAY;;AAE5D,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAMW,KAAK,GAAGN,QAAQ,CAACO,IAAT,CAAcL,QAAd,CAAd;AACA,QAAMM,cAAc,GAAGF,KAAK,CAACF,KAAN,CAAYK,SAAZ,IAAyB,EAAhD;AAEA,QAAMC,aAAa,GAAIN,KAAK,CAACO,KAAN,KAAgBC,SAAjB,GAA8B,KAA9B,GAAsCf,MAAM,CAACgB,cAAP,CAAsBT,KAAK,CAACO,KAA5B,EAAmCP,KAAK,CAACU,MAAzC,EAAiDC,IAAjD,CAAsDC,EAAtD,KAA6DX,MAAM,CAACY,QAAhI;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBf,KAArB;AACAc,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBT,aAApB;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2Bf,KAAK,CAACO,KAAjC;AACAO,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCtB,MAAM,CAACgB,cAAP,CAAsBT,KAAK,CAACO,KAA5B,EAAmCP,KAAK,CAACU,MAAzC,EAAiDC,IAAjD,CAAsDC,EAA3F;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+Bd,MAA/B;AAEA,QAAMI,SAAS,GAAGJ,MAAlB,CAd4D,CAexD;AACA;AACA;;AAEJ,SACI,MAAC,IAAD,EAAUD,KAAV,EACKL,KAAK,CAACqB,YAAN,CAAmBd,KAAnB,EAA0B;AACvBG,IAAAA,SAAS,EAAEA,SAAS,IAAI;AADD,GAA1B,CADL,CADJ;AAOH,CA1BD,C,CA4BA;AACA;AACA;;;AAEA,eAAeR,UAAf","sourcesContent":["import { useRouter } from 'next/router'\r\nimport PropTypes from 'prop-types'\r\nimport routes, {Link} from '../routes';\r\nimport React, { Children } from 'react'\r\n\r\nconst ActiveLink = ({ children, activeClassName, ...props }) => {\r\n\r\n    const router = useRouter()\r\n    const child = Children.only(children)\r\n    const childClassName = child.props.className || ''\r\n\r\n    const isActiveRoute = (props.route === undefined) ? false : routes.findAndGetUrls(props.route, props.params).urls.as === router.pathname;\r\n\r\n    console.log('props', props)\r\n    console.log('test', isActiveRoute)\r\n    console.log('props.route', props.route)\r\n    console.log('routes.findAndGetUrls', routes.findAndGetUrls(props.route, props.params).urls.as)\r\n    console.log('routes.pathname', router)\r\n\r\n    const className = router\r\n        // pathname === props.href\r\n        //     ? `${childClassName} ${activeClassName}`.trim()\r\n        //     : childClassName\r\n\r\n    return (\r\n        <Link {...props}>\r\n            {React.cloneElement(child, {\r\n                className: className || null\r\n            })}\r\n        </Link>\r\n    )\r\n}\r\n\r\n// ActiveLink.propTypes = {\r\n//     activeClassName: PropTypes.string.isRequired\r\n// }\r\n\r\nexport default ActiveLink"]},"metadata":{},"sourceType":"module"}