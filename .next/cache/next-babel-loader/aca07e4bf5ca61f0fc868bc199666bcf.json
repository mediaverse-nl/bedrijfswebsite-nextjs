{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Field } from 'formik';\nimport PropTypes from 'prop-types';\n\nclass TextInputWrappedInternal extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", event => {\n      const {\n        field: {\n          name\n        },\n        form: {\n          handleChange,\n          setFieldTouched\n        }\n      } = this.props;\n      handleChange(event);\n    });\n  }\n\n  render() {\n    const {\n      field,\n      label\n    } = this.props;\n    const divProps = Object.assign({}, this.props);\n    delete divProps.form;\n    delete divProps.field;\n    console.log(divProps);\n    return __jsx(\"div\", {\n      className: \"form-group\"\n    }, this.props.label && __jsx(\"label\", {\n      htmlFor: this.props.id\n    }, this.props.label), __jsx(\"input\", _extends({\n      onChange: this.handleChange,\n      value: field.value,\n      name: field.name,\n      label: label\n    }, this.props, {\n      className: `form-control ${this.props.error ? 'is-invalid' : ''}`\n    })), this.props.error && __jsx(\"div\", {\n      style: {\n        color: \"red\"\n      },\n      className: \"invalid-feedback\"\n    }, this.props.error));\n  }\n\n}\n\nexport default (props => __jsx(Field, _extends({\n  component: TextInputWrappedInternal\n}, props)));","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","Component","Field","PropTypes","TextInputWrappedInternal","constructor","props","event","field","name","form","handleChange","setFieldTouched","render","label","divProps","Object","assign","console","log","id","value","error","color"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,wBAAN,SAAuCH,SAAvC,CAAiD;AAC7CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,0CAIJC,KAAK,IAAI;AACpB,YAAM;AACFC,QAAAA,KAAK,EAAE;AAAEC,UAAAA;AAAF,SADL;AAEFC,QAAAA,IAAI,EAAE;AAAEC,UAAAA,YAAF;AAAgBC,UAAAA;AAAhB;AAFJ,UAGF,KAAKN,KAHT;AAKAK,MAAAA,YAAY,CAACJ,KAAD,CAAZ;AACH,KAXkB;AAElB;;AAWDM,EAAAA,MAAM,GAAG;AACL,UAAM;AAACL,MAAAA,KAAD;AAAQM,MAAAA;AAAR,QAAiB,KAAKR,KAA5B;AAEA,UAAMS,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKX,KAAvB,CAAjB;AACA,WAAOS,QAAQ,CAACL,IAAhB;AACA,WAAOK,QAAQ,CAACP,KAAhB;AAGAU,IAAAA,OAAO,CAACC,GAAR,CAAYJ,QAAZ;AACA,WACI;AAAK,MAAA,SAAS,EAAC;AAAf,OACK,KAAKT,KAAL,CAAWQ,KAAX,IACG;AAAO,MAAA,OAAO,EAAE,KAAKR,KAAL,CAAWc;AAA3B,OAAgC,KAAKd,KAAL,CAAWQ,KAA3C,CAFR,EAII;AACI,MAAA,QAAQ,EAAE,KAAKH,YADnB;AACiC,MAAA,KAAK,EAAEH,KAAK,CAACa,KAD9C;AACqD,MAAA,IAAI,EAAEb,KAAK,CAACC,IADjE;AACuE,MAAA,KAAK,EAAEK;AAD9E,OACyF,KAAKR,KAD9F;AAEI,MAAA,SAAS,EAAG,gBAAe,KAAKA,KAAL,CAAWgB,KAAX,GAAmB,YAAnB,GAAkC,EAAG;AAFpE,OAJJ,EAQK,KAAKhB,KAAL,CAAWgB,KAAX,IACG;AAAK,MAAA,KAAK,EAAE;AAACC,QAAAA,KAAK,EAAE;AAAR,OAAZ;AAA4B,MAAA,SAAS,EAAC;AAAtC,OACK,KAAKjB,KAAL,CAAWgB,KADhB,CATR,CADJ;AAgBH;;AAvC4C;;AA0CjD,gBAAehB,KAAK,IAAI,MAAC,KAAD;AAAO,EAAA,SAAS,EAAEF;AAAlB,GAAgDE,KAAhD,EAAxB","sourcesContent":["import React, { Component } from 'react';\r\nimport { Field } from 'formik';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass TextInputWrappedInternal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const {\r\n            field: { name },\r\n            form: { handleChange, setFieldTouched }\r\n        } = this.props;\r\n\r\n        handleChange(event);\r\n    };\r\n\r\n    render() {\r\n        const {field, label} = this.props;\r\n\r\n        const divProps = Object.assign({}, this.props);\r\n        delete divProps.form;\r\n        delete divProps.field;\r\n\r\n\r\n        console.log(divProps)\r\n        return (\r\n            <div className=\"form-group\">\r\n                {this.props.label &&\r\n                    <label htmlFor={this.props.id}>{this.props.label}</label>\r\n                }\r\n                <input\r\n                    onChange={this.handleChange} value={field.value} name={field.name} label={label} {...this.props}\r\n                    className={`form-control ${this.props.error ? 'is-invalid' : ''}`}\r\n                />\r\n                {this.props.error &&\r\n                    <div style={{color: \"red\"}} className=\"invalid-feedback\">\r\n                        {this.props.error}\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n"]},"metadata":{},"sourceType":"module"}