{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport classNames from \"classnames\";\nimport { Field } from \"formik\"; // Input feedback\n\nconst InputFeedback = ({\n  error\n}) => error ? __jsx(\"div\", {\n  style: {\n    color: \"red\"\n  },\n  className: classNames(\"input-feedback\")\n}, error) : null; // Checkbox input\n\n\nexport const Checkbox = (_ref) => {\n  let {\n    field: {\n      name,\n      value,\n      onChange,\n      onBlur\n    },\n    form: {\n      errors,\n      touched\n    },\n    id,\n    label,\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"field\", \"form\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"custom-control custom-checkbox\"\n  }, __jsx(\"input\", {\n    name: name,\n    id: id,\n    type: \"checkbox\",\n    value: value,\n    checked: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"custom-control-input\"\n  }), __jsx(\"label\", {\n    htmlFor: id,\n    className: \"custom-control-label\"\n  }, label), touched[name] && __jsx(InputFeedback, {\n    error: errors[name]\n  }));\n}; // Checkbox group\n\nexport class CheckboxGroup extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", event => {\n      const target = event.currentTarget;\n      let valueArray = [...this.props.value] || [];\n\n      if (target.checked) {\n        valueArray.push(target.id);\n      } else {\n        valueArray.splice(valueArray.indexOf(target.id), 1);\n      }\n\n      this.props.onChange(this.props.id, valueArray);\n    });\n\n    _defineProperty(this, \"handleBlur\", () => {\n      // take care of touched\n      this.props.onBlur(this.props.id, true);\n    });\n  }\n\n  render() {\n    const {\n      value,\n      error,\n      touched,\n      label,\n      className,\n      children\n    } = this.props;\n    const classes = classNames(\"input-field\", \"form-group\", {\n      \"is-success\": value || !error && touched,\n      // handle prefilled or user-filled\n      \"is-error\": !!error && touched\n    }, className);\n    return __jsx(\"div\", {\n      className: classes\n    }, __jsx(\"label\", null, label), React.Children.map(children, child => {\n      return React.cloneElement(child, {\n        field: {\n          value: value.includes(child.props.id),\n          onChange: this.handleChange,\n          onBlur: this.handleBlur\n        }\n      });\n    }), touched && __jsx(InputFeedback, {\n      error: error\n    }));\n  }\n\n} // Radio input\n\nexport const RadioButton = (_ref2) => {\n  let {\n    field: {\n      name,\n      value,\n      onChange,\n      onBlur\n    },\n    id,\n    label,\n    className\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"field\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", {\n    className: \"custom-control custom-radio\"\n  }, __jsx(\"input\", _extends({\n    name: name,\n    id: id,\n    type: \"radio\",\n    value: value,\n    checked: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: \"custom-control-input\"\n  }, props)), __jsx(\"label\", {\n    htmlFor: id,\n    className: \"custom-control-label\"\n  }, label));\n}; // Radio group\n\nexport const RadioButtonGroup = ({\n  value,\n  error,\n  touched,\n  id,\n  label,\n  className,\n  children\n}) => {\n  const classes = classNames(\"input-field\", {\n    \"is-success\": value || !error && touched,\n    // handle prefilled or user-filled\n    \"is-error\": !!error && touched\n  }, className);\n  return __jsx(\"div\", {\n    className: classNames(\"form-group\")\n  }, __jsx(\"label\", null, label), children, touched && __jsx(InputFeedback, {\n    error: error\n  }));\n};\nexport const SelectField = props => {\n  return __jsx(Field, _extends({\n    type: \"select\",\n    component: InputField\n  }, props));\n};\nexport const TextField = props => {\n  return __jsx(Field, _extends({\n    type: \"text\",\n    component: InputField\n  }, props));\n};\nexport const TextareaField = props => {\n  return __jsx(Field, _extends({\n    type: \"textarea\",\n    component: InputField\n  }, props));\n};\nexport class InputField extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", event => {\n      const {\n        field: {\n          name\n        },\n        form: {\n          handleChange\n        }\n      } = this.props;\n      handleChange(event);\n    });\n  }\n\n  renderSwitch(type) {\n    switch (type) {\n      case 'textarea':\n        return __jsx(TextareaInput, _extends({}, this.props, {\n          onChange: this.handleChange\n        }));\n\n      case 'text':\n        return __jsx(TextInput, _extends({}, this.props, {\n          onChange: this.handleChange\n        }));\n\n      case 'email':\n        return __jsx(EmailInput, _extends({}, this.props, {\n          onChange: this.handleChange\n        }));\n\n      default:\n        return;\n    }\n  }\n\n  render() {\n    const {\n      label\n    } = this.props;\n    const inputProps = Object.assign({}, this.props);\n    delete inputProps.form;\n    delete inputProps.field;\n    delete inputProps.error;\n    delete inputProps.values;\n    console.log(this.props.type);\n    return __jsx(\"div\", {\n      className: \"form-group\"\n    }, __jsx(\"style\", null, `\n                    \n                `), __jsx(\"label\", null, label), this.renderSwitch(this.props.type), this.props.error && __jsx(InputFeedback, {\n      error: this.props.error\n    }));\n  }\n\n} // const get = (type) => {\n//     switch (type) {\n//         case '/':\n//         case '/report':\n//         case '/report/lesson_class':\n//             const ReportSideBar = require('containers/layouts/admin/sidebars/report-sidebar').default\n//             return <ReportSideBar />\n//         default:\n//             return null\n//     }\n// }\n\nexport const TextareaInput = props => {\n  return __jsx(\"textarea\", _extends({\n    rows: \"5\",\n    className: `form-control${props.error ? ' is-invalid' : ''}`,\n    onChange: props.onChange,\n    id: props.label\n  }, props));\n};\nexport const EmailInput = props => {\n  return __jsx(\"input\", _extends({\n    className: `form-control${props.error ? ' is-invalid' : ''}`,\n    onChange: props.onChange,\n    id: props.label\n  }, props));\n};\nexport const TextInput = props => {\n  return __jsx(\"input\", _extends({\n    className: `form-control${props.error ? ' is-invalid' : ''}`,\n    onChange: props.onChange,\n    id: props.label\n  }, props));\n};\n{\n  /*<CheckboxGroup*/\n}\n{\n  /*    id=\"pets\"*/\n}\n{\n  /*    label=\"Which of these?\"*/\n}\n{\n  /*    value={values.pets}*/\n}\n{\n  /*    error={errors.pets}*/\n}\n{\n  /*    touched={touched.pets}*/\n}\n{\n  /*    onChange={setFieldValue}*/\n}\n{\n  /*    onBlur={setFieldTouched}*/\n}\n{\n  /*>*/\n}\n{\n  /*    {Object.keys(testArray).map(function(name, index) {*/\n}\n{\n  /*        return (*/\n}\n{\n  /*            <Field*/\n}\n{\n  /*                key={index}*/\n}\n{\n  /*                component={Checkbox}*/\n}\n{\n  /*                id={name}*/\n}\n{\n  /*                label={name}*/\n}\n{\n  /*            />*/\n}\n{\n  /*        )*/\n}\n{\n  /*    })}*/\n}\n{\n  /*</CheckboxGroup>*/\n}\n{\n  /*<RadioButtonGroup*/\n}\n{\n  /*id=\"radio\"*/\n}\n{\n  /*label=\"One of these please\"*/\n}\n{\n  /*value={values.radio}*/\n}\n{\n  /*error={errors.radio}*/\n}\n{\n  /*touched={touched.radio}*/\n}\n{\n  /*    >*/\n}\n{\n  /*    {Object.keys(testArray).map(function(name, index) {*/\n}\n{\n  /*            return (*/\n}\n{\n  /*                <Field*/\n}\n{\n  /*                    key={index}*/\n}\n{\n  /*                    component={RadioButton}*/\n}\n{\n  /*                    name=\"radio\"*/\n}\n{\n  /*                    id={name}*/\n}\n{\n  /*                    label={name}*/\n}\n{\n  /*                />*/\n}\n{\n  /*            )*/\n}\n{\n  /*        })}*/\n}\n{}\n/*</RadioButtonGroup>*/\n// class TextInputWrappedInternal extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//\n//     handleChange = event => {\n//         const {\n//             field: { name },\n//             form: { handleChange }\n//         } = this.props;\n//\n//         handleChange(event);\n//     };\n//\n//     render() {\n//         const {field, label} = this.props;\n//\n//         const inputProps = Object.assign({}, this.props);\n//\n//         delete inputProps.form;\n//         delete inputProps.label;\n//         delete inputProps.field;\n//         delete inputProps.error;\n//         delete inputProps.values;\n//\n//         const map = { a: 1, b: 2, c: 3 };\n//\n//         return (\n//             <div className=\"form-group\">\n//                 {/*label of input*/}\n//                 {this.props.label &&\n//                     <label htmlFor={this.props.id}>{label}</label>\n//                 }\n//\n//                 {/*text input*/}\n//                 {this.props.type == \"text\" &&\n//                     <input\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*textarea input*/}\n//                 {this.props.type == \"textarea\" &&\n//                     <textarea\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*select input*/}\n//                 {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\n//                     <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                     >\n//                         {Object.keys(this.props.values).map(function(name, index){\n//                             return (\n//                                 <option key={index} value={index}>\n//                                     {name}\n//                                 </option>\n//                             )\n//                         })}\n//                     </select>\n//                 }\n//\n//                 {/*{console.log('field', this)}*/}\n//                 {/*/!*checkbox input*!/*/}\n//                 {/*<label htmlFor=\"\">pets</label>*/}\n//                 {/*<FieldArray name=\"pets\">*/}\n//                 {/*    {(arrayHelper) => (*/}\n//                 {/*        <div>*/}\n//                 {/*            {console.log('-------------------------', this.props)}*/}\n//                 {/*            /!*{this.props.values.map(pet => (*!/*/}\n//                 {/*            /!*    <div key={pet.name}>*!/*/}\n//\n//                 {/*            /!*    </div>*!/*/}\n//                 {/*            /!*))}*!/*/}\n//                 {/*        </div>*/}\n//                 {/*    )}*/}\n//                 {/*</FieldArray>*/}\n//                 {/*<label htmlFor=\"\">end pets</label>*/}\n//\n//\n//                 {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\n//                     <div>\n//                         {console.log(this.handleChange.bind(this))}\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"1\" id=\"1\" {...inputProps}\n//                                 // onChange={this.handleChange}\n//                                    onChange={(event) => {\n//                                        console.log(\"========================\",event, this);\n//                                        const value = event.target.checked ? 'a' : null\n//                                        console.log(\"========================2\",value);\n//\n//                                        // this.props.setFieldValue('pets.0', value)\n//                                    }}\n//                                    // checked={ }\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"2\" id=\"1\" {...inputProps}\n//                                 onChange={this.handleChange}\n//\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                     </div>\n// Object.keys(this.props.values).map(function(name, index){\n//     {console.log('test hier --------------------------------', index, name, inputProps)}\n//     return (\n//         <div className=\"form-check\" key={index}>\n//             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\n//                     // onChange={this.handleChange}\n//\n//                    // checked={values.check}\n//                    // onChange={() => setFieldValue(\"check\", !values.check)}\n//             />\n//             <label className=\"form-check-label\" htmlFor={name+index}>\n//                 {name}\n//             </label>\n//         </div>\n//     )\n// })\n// }\n\n/*\r\n                {/!*!/!*radio input*!/!*!/}\r\n                {/!*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*!/}\r\n                {/!*    Object.keys(this.props.values).map(function(name, index){*!/}\r\n                {/!*        return (*!/}\r\n                {/!*            <div className=\"form-check\" key={index}>*!/}\r\n                {/!*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*!/}\r\n                {/!*                <label className=\"form-check-label\" htmlFor={name+index}>*!/}\r\n                {/!*                    {name}*!/}\r\n                {/!*                </label>*!/}\r\n                {/!*            </div>*!/}\r\n                {/!*        )*!/}\r\n                {/!*    })*!/}\r\n                {/!*}*!/}*/\n//                 {this.props.error &&\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">\n//                         {this.props.error}\n//                     </div>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// export default props => <Field component={TextInputWrappedInternal} {...props} />;","map":null,"metadata":{},"sourceType":"module"}