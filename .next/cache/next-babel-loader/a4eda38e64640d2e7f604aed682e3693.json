{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useRouter } from 'next/router';\nimport routes, { Link } from '../routes';\nimport React, { Children } from 'react';\n\nconst ActiveLink = (_ref) => {\n  let {\n    children,\n    activeClassName\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\", \"activeClassName\"]);\n\n  const router = useRouter();\n  const child = Children.only(children);\n  const childClassName = child.props.className || '';\n  const isActiveRoute = props.route === undefined ? false : routes.findAndGetUrls(props.route, props.params).urls.as === router.asPath;\n  const className = isActiveRoute ? `${childClassName} ${activeClassName}`.trim() : childClassName;\n  return __jsx(Link, props, React.cloneElement(child, {\n    className: className || null\n  }));\n};\n\nexport default ActiveLink;","map":null,"metadata":{},"sourceType":"module"}