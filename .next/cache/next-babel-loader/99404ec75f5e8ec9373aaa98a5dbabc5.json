{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from 'react';\nimport { Field, FieldArray } from 'formik';\n\nvar TextInputWrappedInternal = /*#__PURE__*/function (_Component) {\n  _inherits(TextInputWrappedInternal, _Component);\n\n  function TextInputWrappedInternal(props) {\n    var _this;\n\n    _classCallCheck(this, TextInputWrappedInternal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(TextInputWrappedInternal).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"handleChange\", function (event) {\n      var _this$props = _this.props,\n          name = _this$props.field.name,\n          handleChange = _this$props.form.handleChange;\n      handleChange(event);\n    });\n\n    return _this;\n  }\n\n  _createClass(TextInputWrappedInternal, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          field = _this$props2.field,\n          label = _this$props2.label;\n      var inputProps = Object.assign({}, this.props);\n      delete inputProps.form;\n      delete inputProps.label;\n      delete inputProps.field;\n      delete inputProps.error;\n      delete inputProps.values;\n      var map = {\n        a: 1,\n        b: 2,\n        c: 3\n      };\n      return __jsx(\"div\", {\n        className: \"form-group\"\n      }, this.props.label && __jsx(\"label\", {\n        htmlFor: this.props.id\n      }, label), this.props.type == \"text\" && __jsx(\"input\", _extends({\n        onChange: this.handleChange,\n        id: label,\n        value: field.value,\n        name: field.name\n      }, inputProps, {\n        className: \"form-control\".concat(this.props.error ? ' is-invalid' : '')\n      })), this.props.type == \"textarea\" && __jsx(\"textarea\", _extends({\n        onChange: this.handleChange,\n        id: label,\n        value: field.value,\n        name: field.name\n      }, inputProps, {\n        className: \"form-control\".concat(this.props.error ? ' is-invalid' : '')\n      })), this.props.type == \"select\" && typeof this.props.values !== \"undefined\" && __jsx(\"select\", _extends({\n        className: \"form-control\".concat(this.props.error ? ' is-invalid' : ''),\n        onChange: this.handleChange,\n        id: label,\n        value: field.value,\n        name: field.name\n      }, inputProps), Object.keys(this.props.values).map(function (name, index) {\n        return __jsx(\"option\", {\n          key: index,\n          value: index\n        }, name);\n      })), this.props.type == \"checkbox\" && typeof this.props.values === 'object' && __jsx(\"div\", null, console.log(this.handleChange.bind(this)), __jsx(\"div\", {\n        className: \"form-check\"\n      }, __jsx(\"input\", _extends({\n        className: \"form-check-input\",\n        type: \"checkbox\",\n        name: \"pets\",\n        value: \"test\",\n        id: \"1\"\n      }, inputProps, {\n        onChange: this.handleChange // checked={this.props.values.check}\n        // onChange={() => setFieldValue(\"check\", !values.check)}\n\n      })), __jsx(\"label\", {\n        className: \"form-check-label\",\n        htmlFor: \"1\"\n      }, \"test\"))) // Object.keys(this.props.values).map(function(name, index){\n      //     {console.log('test hier --------------------------------', index, name, inputProps)}\n      //     return (\n      //         <div className=\"form-check\" key={index}>\n      //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\n      //                     // onChange={this.handleChange}\n      //\n      //                    // checked={values.check}\n      //                    // onChange={() => setFieldValue(\"check\", !values.check)}\n      //             />\n      //             <label className=\"form-check-label\" htmlFor={name+index}>\n      //                 {name}\n      //             </label>\n      //         </div>\n      //     )\n      // })\n      , this.props.error && __jsx(\"div\", {\n        style: {\n          color: \"red\"\n        },\n        className: \"invalid-feedback\"\n      }, this.props.error));\n    }\n  }]);\n\n  return TextInputWrappedInternal;\n}(Component);\n\nexport default (function (props) {\n  return __jsx(Field, _extends({\n    component: TextInputWrappedInternal\n  }, props));\n});","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","Component","Field","FieldArray","TextInputWrappedInternal","props","event","name","field","handleChange","form","label","inputProps","Object","assign","error","values","map","a","b","c","id","type","value","keys","index","console","log","bind","color"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,QAAlC;;IAEMC,wB;;;AACF,oCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kGAAMA,KAAN;;AADe,mEAIJ,UAAAC,KAAK,EAAI;AAAA,wBAIhB,MAAKD,KAJW;AAAA,UAEPE,IAFO,eAEhBC,KAFgB,CAEPD,IAFO;AAAA,UAGRE,YAHQ,eAGhBC,IAHgB,CAGRD,YAHQ;AAMpBA,MAAAA,YAAY,CAACH,KAAD,CAAZ;AACH,KAXkB;;AAAA;AAElB;;;;6BAWQ;AAAA,yBACkB,KAAKD,KADvB;AAAA,UACEG,KADF,gBACEA,KADF;AAAA,UACSG,KADT,gBACSA,KADT;AAGL,UAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKT,KAAvB,CAAnB;AAEA,aAAOO,UAAU,CAACF,IAAlB;AACA,aAAOE,UAAU,CAACD,KAAlB;AACA,aAAOC,UAAU,CAACJ,KAAlB;AACA,aAAOI,UAAU,CAACG,KAAlB;AACA,aAAOH,UAAU,CAACI,MAAlB;AAEA,UAAMC,GAAG,GAAG;AAAEC,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,CAAC,EAAE,CAAX;AAAcC,QAAAA,CAAC,EAAE;AAAjB,OAAZ;AAEA,aACI;AAAK,QAAA,SAAS,EAAC;AAAf,SAEK,KAAKf,KAAL,CAAWM,KAAX,IACG;AAAO,QAAA,OAAO,EAAE,KAAKN,KAAL,CAAWgB;AAA3B,SAAgCV,KAAhC,CAHR,EAOK,KAAKN,KAAL,CAAWiB,IAAX,IAAmB,MAAnB,IACG;AACI,QAAA,QAAQ,EAAE,KAAKb,YADnB;AACiC,QAAA,EAAE,EAAEE,KADrC;AAC4C,QAAA,KAAK,EAAEH,KAAK,CAACe,KADzD;AACgE,QAAA,IAAI,EAAEf,KAAK,CAACD;AAD5E,SACsFK,UADtF;AAEI,QAAA,SAAS,wBAAiB,KAAKP,KAAL,CAAWU,KAAX,GAAmB,aAAnB,GAAmC,EAApD;AAFb,SARR,EAeK,KAAKV,KAAL,CAAWiB,IAAX,IAAmB,UAAnB,IACG;AACI,QAAA,QAAQ,EAAE,KAAKb,YADnB;AACiC,QAAA,EAAE,EAAEE,KADrC;AAC4C,QAAA,KAAK,EAAEH,KAAK,CAACe,KADzD;AACgE,QAAA,IAAI,EAAEf,KAAK,CAACD;AAD5E,SACsFK,UADtF;AAEI,QAAA,SAAS,wBAAiB,KAAKP,KAAL,CAAWU,KAAX,GAAmB,aAAnB,GAAmC,EAApD;AAFb,SAhBR,EAuBK,KAAKV,KAAL,CAAWiB,IAAX,IAAmB,QAAnB,IAA+B,OAAO,KAAKjB,KAAL,CAAWW,MAAlB,KAA6B,WAA5D,IACG;AAAQ,QAAA,SAAS,wBAAiB,KAAKX,KAAL,CAAWU,KAAX,GAAmB,aAAnB,GAAmC,EAApD,CAAjB;AACI,QAAA,QAAQ,EAAE,KAAKN,YADnB;AACiC,QAAA,EAAE,EAAEE,KADrC;AAC4C,QAAA,KAAK,EAAEH,KAAK,CAACe,KADzD;AACgE,QAAA,IAAI,EAAEf,KAAK,CAACD;AAD5E,SACsFK,UADtF,GAGKC,MAAM,CAACW,IAAP,CAAY,KAAKnB,KAAL,CAAWW,MAAvB,EAA+BC,GAA/B,CAAmC,UAASV,IAAT,EAAekB,KAAf,EAAqB;AACrD,eACI;AAAQ,UAAA,GAAG,EAAEA,KAAb;AAAoB,UAAA,KAAK,EAAEA;AAA3B,WACKlB,IADL,CADJ;AAKH,OANA,CAHL,CAxBR,EAuDK,KAAKF,KAAL,CAAWiB,IAAX,IAAmB,UAAnB,IAAiC,OAAO,KAAKjB,KAAL,CAAWW,MAAlB,KAA6B,QAA9D,IACG,mBACKU,OAAO,CAACC,GAAR,CAAY,KAAKlB,YAAL,CAAkBmB,IAAlB,CAAuB,IAAvB,CAAZ,CADL,EAEI;AAAK,QAAA,SAAS,EAAC;AAAf,SACI;AAAO,QAAA,SAAS,EAAC,kBAAjB;AAAoC,QAAA,IAAI,EAAC,UAAzC;AAAoD,QAAA,IAAI,EAAC,MAAzD;AAAgE,QAAA,KAAK,EAAC,MAAtE;AAA6E,QAAA,EAAE,EAAC;AAAhF,SAAwFhB,UAAxF;AACI,QAAA,QAAQ,EAAE,KAAKH,YADnB,CAGI;AACA;;AAJJ,SADJ,EAOI;AAAO,QAAA,SAAS,EAAC,kBAAjB;AAAoC,QAAA,OAAO,EAAC;AAA5C,gBAPJ,CAFJ,CAxDR,CAuEQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFR,QAwGK,KAAKJ,KAAL,CAAWU,KAAX,IACG;AAAK,QAAA,KAAK,EAAE;AAACc,UAAAA,KAAK,EAAE;AAAR,SAAZ;AAA4B,QAAA,SAAS,EAAC;AAAtC,SACK,KAAKxB,KAAL,CAAWU,KADhB,CAzGR,CADJ;AAgHH;;;;EA3IkCd,S;;AA8IvC,gBAAe,UAAAI,KAAK;AAAA,SAAI,MAAC,KAAD;AAAO,IAAA,SAAS,EAAED;AAAlB,KAAgDC,KAAhD,EAAJ;AAAA,CAApB","sourcesContent":["import React, { Component } from 'react';\r\nimport { Field, FieldArray } from 'formik';\r\n\r\nclass TextInputWrappedInternal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    handleChange = event => {\r\n        const {\r\n            field: { name },\r\n            form: { handleChange }\r\n        } = this.props;\r\n\r\n        handleChange(event);\r\n    };\r\n\r\n    render() {\r\n        const {field, label} = this.props;\r\n\r\n        const inputProps = Object.assign({}, this.props);\r\n\r\n        delete inputProps.form;\r\n        delete inputProps.label;\r\n        delete inputProps.field;\r\n        delete inputProps.error;\r\n        delete inputProps.values;\r\n\r\n        const map = { a: 1, b: 2, c: 3 };\r\n\r\n        return (\r\n            <div className=\"form-group\">\r\n                {/*label of input*/}\r\n                {this.props.label &&\r\n                    <label htmlFor={this.props.id}>{label}</label>\r\n                }\r\n\r\n                {/*text input*/}\r\n                {this.props.type == \"text\" &&\r\n                    <input\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                        className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                    />\r\n                }\r\n\r\n                {/*textarea input*/}\r\n                {this.props.type == \"textarea\" &&\r\n                    <textarea\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                        className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                    />\r\n                }\r\n\r\n                {/*select input*/}\r\n                {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\r\n                    <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n                        onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n                    >\r\n                        {Object.keys(this.props.values).map(function(name, index){\r\n                            return (\r\n                                <option key={index} value={index}>\r\n                                    {name}\r\n                                </option>\r\n                            )\r\n                        })}\r\n                    </select>\r\n                }\r\n\r\n                {/*{console.log('field', this)}*/}\r\n                {/*/!*checkbox input*!/*/}\r\n                {/*<label htmlFor=\"\">pets</label>*/}\r\n                {/*<FieldArray name=\"pets\">*/}\r\n                {/*    {(arrayHelper) => (*/}\r\n                {/*        <div>*/}\r\n                {/*            {console.log('-------------------------', this.props)}*/}\r\n                {/*            /!*{this.props.values.map(pet => (*!/*/}\r\n                {/*            /!*    <div key={pet.name}>*!/*/}\r\n\r\n                {/*            /!*    </div>*!/*/}\r\n                {/*            /!*))}*!/*/}\r\n                {/*        </div>*/}\r\n                {/*    )}*/}\r\n                {/*</FieldArray>*/}\r\n                {/*<label htmlFor=\"\">end pets</label>*/}\r\n\r\n\r\n                {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\r\n                    <div>\r\n                        {console.log(this.handleChange.bind(this))}\r\n                        <div className=\"form-check\">\r\n                            <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"test\" id=\"1\" {...inputProps}\r\n                                onChange={this.handleChange}\r\n\r\n                                // checked={this.props.values.check}\r\n                                // onChange={() => setFieldValue(\"check\", !values.check)}\r\n                            />\r\n                            <label className=\"form-check-label\" htmlFor=\"1\">\r\n                                test\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n\r\n                    // Object.keys(this.props.values).map(function(name, index){\r\n                    //     {console.log('test hier --------------------------------', index, name, inputProps)}\r\n                    //     return (\r\n                    //         <div className=\"form-check\" key={index}>\r\n                    //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\r\n                    //                     // onChange={this.handleChange}\r\n                    //\r\n                    //                    // checked={values.check}\r\n                    //                    // onChange={() => setFieldValue(\"check\", !values.check)}\r\n                    //             />\r\n                    //             <label className=\"form-check-label\" htmlFor={name+index}>\r\n                    //                 {name}\r\n                    //             </label>\r\n                    //         </div>\r\n                    //     )\r\n                    // })\r\n                }\r\n\r\n                {/*/!*radio input*!/*/}\r\n                {/*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*/}\r\n                {/*    Object.keys(this.props.values).map(function(name, index){*/}\r\n                {/*        return (*/}\r\n                {/*            <div className=\"form-check\" key={index}>*/}\r\n                {/*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*/}\r\n                {/*                <label className=\"form-check-label\" htmlFor={name+index}>*/}\r\n                {/*                    {name}*/}\r\n                {/*                </label>*/}\r\n                {/*            </div>*/}\r\n                {/*        )*/}\r\n                {/*    })*/}\r\n                {/*}*/}\r\n\r\n                {/*field error*/}\r\n                {this.props.error &&\r\n                    <div style={{color: \"red\"}} className=\"invalid-feedback\">\r\n                        {this.props.error}\r\n                    </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n"]},"metadata":{},"sourceType":"module"}