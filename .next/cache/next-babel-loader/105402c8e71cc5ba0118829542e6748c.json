{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { Formik, Field } from \"formik\";\nimport classNames from \"classnames\"; // Input feedback\n\nconst InputFeedback = ({\n  error\n}) => error ? __jsx(\"div\", {\n  className: classNames(\"input-feedback\")\n}, error) : null; // Checkbox input\n\n\nconst Checkbox = (_ref) => {\n  let {\n    field: {\n      name,\n      value,\n      onChange,\n      onBlur\n    },\n    form: {\n      errors,\n      touched,\n      setFieldValue\n    },\n    id,\n    label,\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"field\", \"form\", \"id\", \"label\", \"className\"]);\n\n  return __jsx(\"div\", null, __jsx(\"input\", {\n    name: name,\n    id: id,\n    type: \"checkbox\",\n    value: value,\n    checked: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    className: classNames(\"radio-button\")\n  }), __jsx(\"label\", {\n    htmlFor: id\n  }, label), touched[name] && __jsx(InputFeedback, {\n    error: errors[name]\n  }));\n}; // import React, { Component } from 'react';\n// import { Field, FieldArray } from 'formik';\n//\n// class TextInputWrappedInternal extends Component {\n//     constructor(props) {\n//         super(props);\n//     }\n//\n//     handleChange = event => {\n//         const {\n//             field: { name },\n//             form: { handleChange }\n//         } = this.props;\n//\n//         handleChange(event);\n//     };\n//\n//     render() {\n//         const {field, label} = this.props;\n//\n//         const inputProps = Object.assign({}, this.props);\n//\n//         delete inputProps.form;\n//         delete inputProps.label;\n//         delete inputProps.field;\n//         delete inputProps.error;\n//         delete inputProps.values;\n//\n//         const map = { a: 1, b: 2, c: 3 };\n//\n//         return (\n//             <div className=\"form-group\">\n//                 {/*label of input*/}\n//                 {this.props.label &&\n//                     <label htmlFor={this.props.id}>{label}</label>\n//                 }\n//\n//                 {/*text input*/}\n//                 {this.props.type == \"text\" &&\n//                     <input\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*textarea input*/}\n//                 {this.props.type == \"textarea\" &&\n//                     <textarea\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                     />\n//                 }\n//\n//                 {/*select input*/}\n//                 {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\n//                     <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\n//                     >\n//                         {Object.keys(this.props.values).map(function(name, index){\n//                             return (\n//                                 <option key={index} value={index}>\n//                                     {name}\n//                                 </option>\n//                             )\n//                         })}\n//                     </select>\n//                 }\n//\n//                 {/*{console.log('field', this)}*/}\n//                 {/*/!*checkbox input*!/*/}\n//                 {/*<label htmlFor=\"\">pets</label>*/}\n//                 {/*<FieldArray name=\"pets\">*/}\n//                 {/*    {(arrayHelper) => (*/}\n//                 {/*        <div>*/}\n//                 {/*            {console.log('-------------------------', this.props)}*/}\n//                 {/*            /!*{this.props.values.map(pet => (*!/*/}\n//                 {/*            /!*    <div key={pet.name}>*!/*/}\n//\n//                 {/*            /!*    </div>*!/*/}\n//                 {/*            /!*))}*!/*/}\n//                 {/*        </div>*/}\n//                 {/*    )}*/}\n//                 {/*</FieldArray>*/}\n//                 {/*<label htmlFor=\"\">end pets</label>*/}\n//\n//\n//                 {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\n//                     <div>\n//                         {console.log(this.handleChange.bind(this))}\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"1\" id=\"1\" {...inputProps}\n//                                 // onChange={this.handleChange}\n//                                    onChange={(event) => {\n//                                        console.log(\"========================\",event, this);\n//                                        const value = event.target.checked ? 'a' : null\n//                                        console.log(\"========================2\",value);\n//\n//                                        // this.props.setFieldValue('pets.0', value)\n//                                    }}\n//                                    // checked={ }\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                         <div className=\"form-check\">\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"2\" id=\"1\" {...inputProps}\n//                                 onChange={this.handleChange}\n//\n//                                 // checked={this.props.values.check}\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\n//                             />\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\n//                                 test\n//                             </label>\n//                         </div>\n//                     </div>\n//\n//                     // Object.keys(this.props.values).map(function(name, index){\n//                     //     {console.log('test hier --------------------------------', index, name, inputProps)}\n//                     //     return (\n//                     //         <div className=\"form-check\" key={index}>\n//                     //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\n//                     //                     // onChange={this.handleChange}\n//                     //\n//                     //                    // checked={values.check}\n//                     //                    // onChange={() => setFieldValue(\"check\", !values.check)}\n//                     //             />\n//                     //             <label className=\"form-check-label\" htmlFor={name+index}>\n//                     //                 {name}\n//                     //             </label>\n//                     //         </div>\n//                     //     )\n//                     // })\n//                 }\n//\n//                 {/*/!*radio input*!/*/}\n//                 {/*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*/}\n//                 {/*    Object.keys(this.props.values).map(function(name, index){*/}\n//                 {/*        return (*/}\n//                 {/*            <div className=\"form-check\" key={index}>*/}\n//                 {/*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*/}\n//                 {/*                <label className=\"form-check-label\" htmlFor={name+index}>*/}\n//                 {/*                    {name}*/}\n//                 {/*                </label>*/}\n//                 {/*            </div>*/}\n//                 {/*        )*/}\n//                 {/*    })*/}\n//                 {/*}*/}\n//\n//                 {/*field error*/}\n//                 {this.props.error &&\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">\n//                         {this.props.error}\n//                     </div>\n//                 }\n//             </div>\n//         );\n//     }\n// }\n//\n// export default props => <Field component={TextInputWrappedInternal} {...props} />;","map":{"version":3,"sources":["C:/Projects/bedrijfswebsite-nextjs/components/fields/InputField.js"],"names":["React","Formik","Field","classNames","InputFeedback","error","Checkbox","field","name","value","onChange","onBlur","form","errors","touched","setFieldValue","id","label","className","props"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,QAA9B;AACA,OAAOC,UAAP,MAAuB,YAAvB,C,CAEA;;AACA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAClBA,KAAK,GAAG;AAAK,EAAA,SAAS,EAAEF,UAAU,CAAC,gBAAD;AAA1B,GAA+CE,KAA/C,CAAH,GAAiE,IAD1E,C,CAGA;;;AACA,MAAMC,QAAQ,GAAG,UAOX;AAAA,MAPY;AAChBC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA,QAAf;AAAyBC,MAAAA;AAAzB,KADS;AAEhBC,IAAAA,IAAI,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,OAAV;AAAmBC,MAAAA;AAAnB,KAFU;AAGhBC,IAAAA,EAHgB;AAIhBC,IAAAA,KAJgB;AAKhBC,IAAAA;AALgB,GAOZ;AAAA,MADDC,KACC;;AACF,SACI,mBACI;AACI,IAAA,IAAI,EAAEX,IADV;AAEI,IAAA,EAAE,EAAEQ,EAFR;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,KAAK,EAAEP,KAJX;AAKI,IAAA,OAAO,EAAEA,KALb;AAMI,IAAA,QAAQ,EAAEC,QANd;AAOI,IAAA,MAAM,EAAEC,MAPZ;AAQI,IAAA,SAAS,EAAER,UAAU,CAAC,cAAD;AARzB,IADJ,EAWI;AAAO,IAAA,OAAO,EAAEa;AAAhB,KAAqBC,KAArB,CAXJ,EAYKH,OAAO,CAACN,IAAD,CAAP,IAAiB,MAAC,aAAD;AAAe,IAAA,KAAK,EAAEK,MAAM,CAACL,IAAD;AAA5B,IAZtB,CADJ;AAgBH,CAxsourcesContent":["import React from \"react\";\r\nimport { Formik, Field } from \"formik\";\r\nimport classNames from \"classnames\";\r\n\r\n// Input feedback\r\nconst InputFeedback = ({ error }) =>\r\n    error ? <div className={classNames(\"input-feedback\")}>{error}</div> : null;\r\n\r\n// Checkbox input\r\nconst Checkbox = ({\r\n  field: { name, value, onChange, onBlur },\r\n  form: { errors, touched, setFieldValue },\r\n  id,\r\n  label,\r\n  className,\r\n  ...props\r\n}) => {\r\n    return (\r\n        <div>\r\n            <input\r\n                name={name}\r\n                id={id}\r\n                type=\"checkbox\"\r\n                value={value}\r\n                checked={value}\r\n                onChange={onChange}\r\n                onBlur={onBlur}\r\n                className={classNames(\"radio-button\")}\r\n            />\r\n            <label htmlFor={id}>{label}</label>\r\n            {touched[name] && <InputFeedback error={errors[name]} />}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\n\r\n// import React, { Component } from 'react';\r\n// import { Field, FieldArray } from 'formik';\r\n//\r\n// class TextInputWrappedInternal extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//     }\r\n//\r\n//     handleChange = event => {\r\n//         const {\r\n//             field: { name },\r\n//             form: { handleChange }\r\n//         } = this.props;\r\n//\r\n//         handleChange(event);\r\n//     };\r\n//\r\n//     render() {\r\n//         const {field, label} = this.props;\r\n//\r\n//         const inputProps = Object.assign({}, this.props);\r\n//\r\n//         delete inputProps.form;\r\n//         delete inputProps.label;\r\n//         delete inputProps.field;\r\n//         delete inputProps.error;\r\n//         delete inputProps.values;\r\n//\r\n//         const map = { a: 1, b: 2, c: 3 };\r\n//\r\n//         return (\r\n//             <div className=\"form-group\">\r\n//                 {/*label of input*/}\r\n//                 {this.props.label &&\r\n//                     <label htmlFor={this.props.id}>{label}</label>\r\n//                 }\r\n//\r\n//                 {/*text input*/}\r\n//                 {this.props.type == \"text\" &&\r\n//                     <input\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                     />\r\n//                 }\r\n//\r\n//                 {/*textarea input*/}\r\n//                 {this.props.type == \"textarea\" &&\r\n//                     <textarea\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                         className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                     />\r\n//                 }\r\n//\r\n//                 {/*select input*/}\r\n//                 {this.props.type == \"select\" && typeof this.props.values !== \"undefined\" &&\r\n//                     <select className={`form-control${this.props.error ? ' is-invalid' : ''}`}\r\n//                         onChange={this.handleChange} id={label} value={field.value} name={field.name} {...inputProps}\r\n//                     >\r\n//                         {Object.keys(this.props.values).map(function(name, index){\r\n//                             return (\r\n//                                 <option key={index} value={index}>\r\n//                                     {name}\r\n//                                 </option>\r\n//                             )\r\n//                         })}\r\n//                     </select>\r\n//                 }\r\n//\r\n//                 {/*{console.log('field', this)}*/}\r\n//                 {/*/!*checkbox input*!/*/}\r\n//                 {/*<label htmlFor=\"\">pets</label>*/}\r\n//                 {/*<FieldArray name=\"pets\">*/}\r\n//                 {/*    {(arrayHelper) => (*/}\r\n//                 {/*        <div>*/}\r\n//                 {/*            {console.log('-------------------------', this.props)}*/}\r\n//                 {/*            /!*{this.props.values.map(pet => (*!/*/}\r\n//                 {/*            /!*    <div key={pet.name}>*!/*/}\r\n//\r\n//                 {/*            /!*    </div>*!/*/}\r\n//                 {/*            /!*))}*!/*/}\r\n//                 {/*        </div>*/}\r\n//                 {/*    )}*/}\r\n//                 {/*</FieldArray>*/}\r\n//                 {/*<label htmlFor=\"\">end pets</label>*/}\r\n//\r\n//\r\n//                 {this.props.type == \"checkbox\" && typeof this.props.values === 'object' &&\r\n//                     <div>\r\n//                         {console.log(this.handleChange.bind(this))}\r\n//                         <div className=\"form-check\">\r\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"1\" id=\"1\" {...inputProps}\r\n//                                 // onChange={this.handleChange}\r\n//                                    onChange={(event) => {\r\n//                                        console.log(\"========================\",event, this);\r\n//                                        const value = event.target.checked ? 'a' : null\r\n//                                        console.log(\"========================2\",value);\r\n//\r\n//                                        // this.props.setFieldValue('pets.0', value)\r\n//                                    }}\r\n//                                    // checked={ }\r\n//                                 // checked={this.props.values.check}\r\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\r\n//                             />\r\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\r\n//                                 test\r\n//                             </label>\r\n//                         </div>\r\n//                         <div className=\"form-check\">\r\n//                             <input className=\"form-check-input\" type=\"checkbox\" name=\"pets\" value=\"2\" id=\"1\" {...inputProps}\r\n//                                 onChange={this.handleChange}\r\n//\r\n//                                 // checked={this.props.values.check}\r\n//                                 // onChange={() => setFieldValue(\"check\", !values.check)}\r\n//                             />\r\n//                             <label className=\"form-check-label\" htmlFor=\"1\">\r\n//                                 test\r\n//                             </label>\r\n//                         </div>\r\n//                     </div>\r\n//\r\n//                     // Object.keys(this.props.values).map(function(name, index){\r\n//                     //     {console.log('test hier --------------------------------', index, name, inputProps)}\r\n//                     //     return (\r\n//                     //         <div className=\"form-check\" key={index}>\r\n//                     //             <input className=\"form-check-input\" type=\"checkbox\" name={field.name} value={name} id={name+index} {...inputProps}\r\n//                     //                     // onChange={this.handleChange}\r\n//                     //\r\n//                     //                    // checked={values.check}\r\n//                     //                    // onChange={() => setFieldValue(\"check\", !values.check)}\r\n//                     //             />\r\n//                     //             <label className=\"form-check-label\" htmlFor={name+index}>\r\n//                     //                 {name}\r\n//                     //             </label>\r\n//                     //         </div>\r\n//                     //     )\r\n//                     // })\r\n//                 }\r\n//\r\n//                 {/*/!*radio input*!/*/}\r\n//                 {/*{this.props.type == \"radio\" && typeof this.props.values !== \"undefined\" &&*/}\r\n//                 {/*    Object.keys(this.props.values).map(function(name, index){*/}\r\n//                 {/*        return (*/}\r\n//                 {/*            <div className=\"form-check\" key={index}>*/}\r\n//                 {/*                <input className=\"form-check-input\" type=\"radio\" value={name} id={name+index} />*/}\r\n//                 {/*                <label className=\"form-check-label\" htmlFor={name+index}>*/}\r\n//                 {/*                    {name}*/}\r\n//                 {/*                </label>*/}\r\n//                 {/*            </div>*/}\r\n//                 {/*        )*/}\r\n//                 {/*    })*/}\r\n//                 {/*}*/}\r\n//\r\n//                 {/*field error*/}\r\n//                 {this.props.error &&\r\n//                     <div style={{color: \"red\"}} className=\"invalid-feedback\">\r\n//                         {this.props.error}\r\n//                     </div>\r\n//                 }\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n//\r\n// export default props => <Field component={TextInputWrappedInternal} {...props} />;\r\n"]},"metadata":{},"sourceType":"module"}